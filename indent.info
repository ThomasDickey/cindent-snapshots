This is indent.info, produced by makeinfo version 6.3 from
indent.texinfo.

INFO-DIR-SECTION Indent Code Formatter
START-INFO-DIR-ENTRY
* CIndent: (cindent).           C code formatter (fork).
END-INFO-DIR-ENTRY

Copyright (C) 1999-2018, 2020 Thomas E. Dickey
Copyright (C) 1995, 1996 Joseph Arceneaux
Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996 Free Software
Foundation, Inc.

   This is Edition 2.0, October, 2020, of 'The 'indent' Manual', for
Indent Version 2.0

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


File: indent.info,  Node: Top,  Next: Indent Program,  Prev: (dir),  Up: (dir)

'indent': Indent and Format C Program Source
********************************************

The 'indent' program changes the appearance of a C program by inserting
or deleting whitespace.

   This is Edition 2.0, May 2016, of 'The 'indent' Manual', for Indent
Version 2.0

* Menu:

* Indent Program::              The 'indent' Program
* Option Summary::              Option Summary
* Index::                       Index


File: indent.info,  Node: Indent Program,  Next: Option Summary,  Prev: Top,  Up: Top

The 'indent' Program
********************

The 'indent' program can be used to make code easier to read.  It can
also convert from one style of writing C to another.

   'indent' understands a substantial amount about the syntax of C, but
it also attempts to cope with incomplete and misformed syntax.

   In version 1.2 and more recent versions, the GNU style of indenting
is the default.

* Menu:

* Invoking indent::             Invoking 'indent'
* Backup files::                Backup Files
* Common styles::               Common styles
* Blank lines::                 Blank lines
* Comments::                    Comments
* Statements::                  Statements
* Declarations::                Declarations
* Indentation::                 Indentation
* Disabling Formatting::        Disabling Formatting
* Other Languages::             Other Languages
* Miscellaneous options::       Miscellaneous options
* Bugs::                        Bugs
* Copyright::                   Copyright


File: indent.info,  Node: Invoking indent,  Next: Backup files,  Up: Indent Program

Invoking 'indent'
=================

As of version 1.3, the format of the 'indent' command is:

     indent [OPTIONS] [INPUT-FILES]

     indent [OPTIONS] [SINGLE-INPUT-FILE] [-o OUTPUT-FILE]

   This format is different from earlier versions and other versions of
'indent'.

   In the first form, one or more input files are specified.  'indent'
makes a backup copy of each file, and the original file is replaced with
its indented version.  *Note Backup files::, for an explanation of how
backups are made.

   In the second form, only one input file is specified.  In this case,
or when the standard input is used, you may specify an output file after
the '-o' option.

   To cause 'indent' to write to standard output, use the '-st' option.
This is only allowed when there is only one input file, or when the
standard input is used.

   If no input files are named, the standard input is read for input.
Also, if a filename named '-' is specified, then the standard input is
read.

   As an example, each of the following commands will input the program
'slithy_toves.c' and write its indented text to 'slithy_toves.out':

     indent slithy_toves.c -o slithy_toves.out

     indent -st slithy_toves.c > slithy_toves.out

     cat slithy_toves.c | indent -o slithy_toves.out

   Most other options to 'indent' control how programs are formatted.
As of version 1.2, 'indent' also recognizes a long name for each option
name.  Long options are prefixed by either '--' or '+'.(*)  In most of
this document, the traditional, short names are used for the sake of
brevity.  *Note Option Summary::, for a list of options, including both
long and short names.

   Here is another example:

     indent -br test/metabolism.c -l85

   This will indent the program 'test/metabolism.c' using the '-br' and
'-l85' options, write the output back to 'test/metabolism.c', and write
the original contents of 'test/metabolism.c' to a backup file in the
directory 'test'.

   Equivalent invocations using long option names for this example would
be:

     indent --braces-on-if-line --line-length185 test/metabolism.c

     indent +braces-on-if-line +line-length185 test/metabolism.c

   If you find that you often use 'indent' with the same options, you
may put those options into a file named '.indent.pro'.  'indent' will
first look for '.indent.pro' in the current directory and use that if
found.  Otherwise, 'indent' will search your home directory for
'.indent.pro' and use that file if it is found.  This behavior is
different from that of other versions of 'indent', which load both files
if they both exist.

   The format of '.indent.pro' is simply a list of options, just as they
would appear on the command line, separated by white space (tabs,
spaces, and newlines).  Options in '.indent.pro' may be surrounded by C
or C++ comments, in which case they are ignored.

   Most command line switches are handled _after_ processing
'.indent.pro'.  Options specified later override arguments specified
earlier, with one exception: Explicitly specified options always
override background options (*note Common styles::).

   You can prevent 'indent' from reading an '.indent.pro' file by
specifying the '-npro' option.

   Alternatively, you can tell 'indent' to read a profile from any file
using the '--profile' option.  The option accepts a parameter which can
be either an absolute pathname (beginning with a '/'), or relative.  If
the pathname is relative, 'indent' searches in the current and home
directories just like the '.indent.pro' file.  The '-npro' option
overrides this, as well.

   ---------- Footnotes ----------

   (*) '+' is being superseded by '--' to maintain consistency with the
POSIX standard.


File: indent.info,  Node: Backup files,  Next: Common styles,  Prev: Invoking indent,  Up: Indent Program

Backup Files
============

As of version 1.3, GNU 'indent' makes GNU-style backup files, the same
way GNU Emacs does.  This means that either "simple" or "numbered"
backup filenames may be made.

   Simple backup file names are generated by appending a suffix to the
original file name.  The default for the this suffix is the
one-character string '~' (tilde).  Thus, the backup file for 'python.c'
would be 'python.c~'.

   Instead of the default, you may specify any string as a suffix by
setting the environment variable 'SIMPLE_BACKUP_SUFFIX' to your
preferred suffix.

   Numbered backup versions of a file 'momewraths' look like
'momewraths.c.~23~', where 23 is the version of this particular backup.
When making a numbered backup of the file 'src/momewrath.c', the backup
file will be named 'src/momewrath.c.~V~', where V is one greater than
the highest version currently existing in the directory 'src'.

   The type of backup file made is controlled by the value of the
environment variable 'VERSION_CONTROL'.  If it is the string 'simple',
then only simple backups will be made.  If its value is the string
'numbered', then numbered backups will be made.  If its value is
'numbered-existing', then numbered backups will be made if there
*already exist* numbered backups for the file being indented; otherwise,
a simple backup is made.  If 'VERSION_CONTROL' is not set, then 'indent'
assumes the behavior of 'numbered-existing'.

   Other versions of 'indent' use the suffix '.BAK' in naming backup
files.  This behavior can be emulated by setting 'SIMPLE_BACKUP_SUFFIX'
to '.BAK'.

   Note also that other versions of 'indent' make backups in the current
directory, rather than in the directory of the source file as GNU
'indent' now does.


File: indent.info,  Node: Common styles,  Next: Blank lines,  Prev: Backup files,  Up: Indent Program

Common styles
=============

There are several common styles of C code, including the GNU style, the
Kernighan & Ritchie style, and the original Berkeley style.  A style may
be selected with a single "background" option, which specifies a set of
values for all other options.  However, explicitly specified options
always override options implied by a background option.

   As of version 1.2, the default style of GNU 'indent' is the GNU
style.  Thus, it is no longer necessary to specify the option '-gnu' to
obtain this format, although doing so will not cause an error.  Option
settings which correspond to the GNU style are:

     -nbad -bap -nbc -bl -ncdb -cs -nce -di2 -ndj
     -ei -nfc1 -i2 -ip5 -lp -pcs -npsl -psl -nsc -nsob -bli2
     -cp1 -nfca

   The GNU coding style is that preferred by the GNU project.  It is the
style that the GNU Emacs C mode encourages and which is used in the C
portions of GNU Emacs.  (People interested in writing programs for
Project GNU should get a copy of 'The GNU Coding Standards', which also
covers semantic and portability issues such as memory usage, the size of
integers, etc.)

   The Kernighan & Ritchie style is used throughout their well-known
book 'The C Programming Language'.  It is enabled with the '-kr' option.
The Kernighan & Ritchie style corresponds to the following set of
options:

     -nbad -bap -nbc -br -c33 -cd33 -ncdb -ce -ci4
     -cli0 -cp33 -d0 -di1 -nfc1 -nfca -i4 -ip0 -l75 -lp
     -npcs -npsl -nsc -nsob -nss -cs

Kernighan & Ritchie style does not put comments to the right of code in
the same column at all times (nor does it use only one space to the
right of the code), so for this style 'indent' has arbitrarily chosen
column 33.

   The style of the original Berkeley 'indent' may be obtained by
specifying '-orig' (or by specifying '--original', using the long option
name).  This style is equivalent to the following settings:

     -nbap -nbad -bc -br -c33 -cd33 -cdb -ce -ci4
     -cli0 -cp33 -di16 -fc1 -fca -i4 -ip4 -l75 -lp
     -npcs -psl -sc -nsob -nss -ts8

   The Linux style is used in the Linux kernel and drivers.  It is
enabled with the '-linux' option (or by specifying '--linux-style'.
This style is equivalent to the following settings:

     -nbad -bap -nbc -bbo -hnl -br -brs -c33 -cd33 -ncdb -ce -ci4
     -cli0 -d0 -di1 -nfc1 -i8 -ip0 -l80 -lp -npcs -nprs -npsl -sai
     -saf -saw -ncs -nsc -sob -nfca -cp33 -ss -ts8 -il1


File: indent.info,  Node: Blank lines,  Next: Comments,  Prev: Common styles,  Up: Indent Program

Blank lines
===========

Various programming styles use blank lines in different places.
'indent' has a number of options to insert or delete blank lines in
specific places.

   The '-bad' option causes 'indent' to force a blank line after every
block of declarations.  The '-nbad' option causes 'indent' not to force
such blank lines.

   The '-bacc' option forces a blank line after (before) every ifdef
group.  The '-nbacc' option forces no such blank line.

   The '-bap' option forces a blank line after every procedure body.
The '-nbap' option forces no such blank line.

   The '-bbb' option forces a blank line before every boxed comment.
(*note Comments::) The '-nbbb' option does not force such blank lines.

   The '-sob' option causes 'indent' to swallow optional blank lines
(that is, any optional blank lines present in the input will be removed
from the output).  If the '-nsob' is specified, any blank lines present
in the input file will be copied to the output file.

* Menu:

* -bad::                        More on the '-bad' option.
* -bap::                        More on the '-bap' option.


File: indent.info,  Node: -bad,  Next: -bap,  Up: Blank lines

--blank-lines-after-declarations
--------------------------------

The '-bad' option forces a blank line after every block of declarations.
The '-nbad' option does not add any such blank lines.

   For example, given the input
     char *foo;
     char *bar;
     /* This separates blocks of declarations.  */
     int baz;

'indent -bad' produces

     char *foo;
     char *bar;

     /* This separates blocks of declarations.  */
     int baz;

and 'indent -nbad' produces

     char *foo;
     char *bar;
     /* This separates blocks of declarations.  */
     int baz;


File: indent.info,  Node: -bap,  Prev: -bad,  Up: Blank lines

--blank-lines-after-procedures
------------------------------

The '-bap' option forces a blank line after every procedure body.

   For example, given the input

     int
     foo ()
     {
       puts("Hi");
     }
     /* The procedure bar is even less interesting.  */
     char *
     bar ()
     {
       puts("Hello");
     }

'indent -bap' produces

     int
     foo ()
     {
       puts ("Hi");
     }

     /* The procedure bar is even less interesting.  */
     char *
     bar ()
     {
       puts ("Hello");
     }

and 'indent -nbap' produces

     int
     foo ()
     {
       puts ("Hi");
     }
     /* The procedure bar is even less interesting.  */
     char *
     bar ()
     {
       puts ("Hello");
     }

No blank line will be added after the procedure 'foo'.


File: indent.info,  Node: Comments,  Next: Statements,  Prev: Blank lines,  Up: Indent Program

Comments
========

'indent' formats both C and C++ comments.  C comments are begun with
'/*', terminated with '*/' and may contain newline characters.  C++
comments begin with the delimiter '//' and end at the newline.

   'indent' handles comments differently depending upon their context.
'indent' attempts to distinguish amongst comments which follow
statements, comments which follow declarations, comments following
preprocessor directives, and comments which are not preceded by code of
any sort, i.e., they begin the text of the line (although not
necessarily in column 1).

   'indent' further distinguishes between comments found outside of
procedures and aggregates, and those found within them.  In particular,
comments beginning a line found within a procedure will be indented to
the column at which code is currently indented.  The exception to this a
comment beginning in the leftmost column; such a comment is output at
that column.

   'indent' attempts to leave "boxed comments" unmodified.  The general
idea of such a comment is that it is enclosed in a rectangle or "box" of
stars or dashes to visually set it apart.  More precisely, boxed
comments are defined as those in which the initial '/*' is followed
immediately by the character '*', '=', '_', or '-', or those in which
the beginning comment delimiter ('/*') is on a line by itself, and the
following line begins with a '*' in the same column as the star of the
opening delimiter.

   Examples of boxed comments are:

     /**********************
      * Comment in a box!! *
      **********************/

            /*
             * A different kind of scent,
             * for a different kind of comment.
             */

   'indent' attempts to leave boxed comments exactly as they are found
in the source file.  Thus the indentation of the comment is unchanged,
and its length is not checked in any way.  The only alteration made is
that an embedded tab character may be converted into the appropriate
number of spaces.

   If the '-bbb' option is specified, all such boxed comments will be
preceded by a blank line, unless such a comment is preceded by code.

   Comments which are not boxed comments may be formatted, which means
that the line is broken to fit within a right margin and left-filled
with whitespace.  Single newlines are equivalent to a space, but blank
lines (two or more newlines in a row) are taken to mean a paragraph
break.  Formatting of comments which begin after the first column is
enabled with the '-fca' option.  To format those beginning in column
one, specify '-fc1'.  Such formatting is disabled by default.

   The right margin for formatting defaults to 78, but may be changed
with the '-lc' option.  If the margin specified does not allow the
comment to be printed, the margin will be automatically extended for the
duration of that comment.  The margin is not respected if the comment is
not being formatted.

   If the comment begins a line (i.e., there is no program text to its
left), it will be indented to the column it was found in unless the
comment is within a block of code.  In that case, such a comment will be
aligned with the indented code of that block (unless the comment began
in the first column).  This alignment may be affected by the '-d'
option, which specifies an amount by which such comments are moved to
the *left*, or unindented.  For example, '-d2' places comments two
spaces to the left of code.  By default, comments are aligned with code,
unless they begin in the first column, in which case they are left there
by default - to get them aligned with the code, specify '-fc1'.

   Comments to the right of code will appear by default in column 33.
This may be changed with one of three options.  '-c' will specify the
column for comments following code, '-cd' specifies the column for
comments following declarations, and '-cp' specifies the column for
comments following preprocessor directives '#else' and '#endif'.

   If the code to the left of the comment exceeds the beginning column,
the comment column will be extended to the next tabstop column past the
end of the code, or in the case of preprocessor directives, to one space
past the end of the directive.  This extension lasts only for the output
of that particular comment.

   The '-cdb' option places the comment delimiters on blank lines.
Thus, a single line comment like '/* Claustrophobia */' can be
transformed into:

     /*
        Claustrophobia
      */

   Stars can be placed at the beginning of multi-line comments with the
'-sc' option.  Thus, the single-line comment above can be transformed
(with '-cdb -sc') into:

     /*
      * Claustrophobia
      */


File: indent.info,  Node: Statements,  Next: Declarations,  Prev: Comments,  Up: Indent Program

Statements
==========

The '-br' or '-bl' option specifies how to format braces.

   The '-br' option formats statement braces like this:

     if (x > 0) {
       x--;
     }

The '-bl' option formats them like this:

     if (x > 0)
       {
         x--;
       }

   These options also affect structure and enumeration declarations.
The '-br' option produces structure declarations like the following:

     struct Sname {
         int i;
         char chp;
     } Vname;

   The default behavior, also obtained by specifying '-bl', would yield
the following format for the same declaration:

     struct Sname
       {
          int i;
          char chp;
       }
     Vname;

   If you use the '-bl' option, you may also want to specify the '-bli'
option.  This option specifies the number of spaces by which braces are
indented.  '-bli2', the default, gives the result shown above.  '-bli0'
results in the following:

     if (x > 0)
     {
       x--;
     }

   If you are using the '-br' option, you probably want to also use the
'-ce' option.  This causes the 'else' in an if-then-else construct to
cuddle up to the immediately preceding '}'.  For example, with '-br -ce'
you get the following:

     if (x > 0) {
       x--;
     } else {
       fprintf (stderr, "...something wrong?\n");
     }

With '-br -nce' that code would appear as

     if (x > 0) {
       x--;
     }
     else {
       fprintf (stderr, "...something wrong?\n");
     }

   The '-cdw' option causes the 'while' in a do-while loop to cuddle up
to the immediately preceding '}'.  For example, with '-cdw' you get the
following:

     do {
       x--;
     } while (x);

   With '-ncdw' that code would appear as

     do {
       x--;
     }
     while (x);

   The '-cli' option specifies the number of spaces that case labels
should be indented to the right of the containing 'switch' statement.

   The default setting gives code like:

     switch (i)
       {
       case 0:
         break;
       case 1:
         {
           ++i;
         }
       default:
         break;
       }

   Using the '-cli2' option that would become:

     switch (i)
       {
         case 0:
           break;
         case 1:
           {
             ++i;
           }
         default:
           break;
       }

   The indentation of the braces below a case statement can be
controlled with the '-cbin' option.  For example, using '-cli2 -cbi0'
results in:

     switch (i)
       {
         case 0:
           break;
         case 1:
         {
           ++i;
         }
         default:
           break;
       }

   If a semicolon is on the same line as a 'for' or 'while' statement,
the '-ss' option will cause a space to be placed before the semicolon.
This emphasizes the semicolon, making it clear that the body of the
'for' or 'while' statement is an empty statement.  '-nss' disables this
feature.

   The '-pcs' option causes a space to be placed between the name of the
procedure being called and the '(' (for example, 'puts ("Hi");'.  The
'-npcs' option would give 'puts("Hi");').

   If the '-cs' option is specified, 'indent' puts a space after a cast
operator.

   The '-bs' option ensures that there is a space between the keyword
'sizeof' and its argument.  In some versions, this is known as the
'Bill_Shannon' option.


File: indent.info,  Node: Declarations,  Next: Indentation,  Prev: Statements,  Up: Indent Program

Declarations
============

By default 'indent' will line up identifiers, in the column specified by
the '-di' option.  For example, '-di16' makes things look like:

     int             foo;
     char           *bar;

   Using a small value (such as one or two) for the '-di' option can be
used to cause the identifiers to be placed in the first available
position, for example

     int foo;
     char *bar;

   The value given to the '-di' option will still affect variables which
are put on separate lines from their types, for example '-di2' will lead
to

     int
       foo;

   If the '-bc' option is specified, a newline is forced after each
comma in a declaration.  For example,

     int a,
       b,
       c;

With the '-nbc' option this would look like

     int a, b, c;

   The '-psl' option causes the type of a procedure being defined to be
placed on the line before the name of the procedure.  This style is
required for the 'etags' program to work correctly, as well as some of
the 'c-mode' functions of Emacs.

   You should use the '-T' option to tell 'indent' the name of all the
type-names in your program that are defined by 'typedef'.  '-T' can be
specified more than once, and all names specified are used.  For
example, if your program contains

     typedef unsigned long CODE_ADDR;
     typedef enum {red, blue, green} COLOR;

you would use the options '-T CODE_ADDR -T COLOR'.

   You may also use the '-ta' option to tell 'indent' to interpret
identifiers ending with "_t" as if they were type-names declared by
'-T'.


File: indent.info,  Node: Indentation,  Next: Disabling Formatting,  Prev: Declarations,  Up: Indent Program

Indentation
===========

One issue in the formatting of code is how far each line should be
indented from the left margin.  When the beginning of a statement such
as 'if' or 'for' is encountered, the indentation level is increased by
the value specified by the '-i' option.  For example, use '-i8' to
specify an eight character indentation for each level.  When a statement
is broken across two lines, the second line is indented by a number of
additional spaces specified by the '-ci' option.  '-ci' defaults to 0.
However, if the '-lp' option is specified, and a line has a left
parenthesis which is not closed on that line, then continuation lines
will be lined up to start at the character position just after the left
parenthesis.  This processing also applies to '[' and applies to '{'
when it occurs in initialization lists.  For example, a piece of
continued code might look like this with '-nlp -ci3' in effect:

       p1 = first_procedure (second_procedure (p2, p3),
          third_procedure (p4, p5));

With '-lp' in effect the code looks somewhat clearer:

       p1 = first_procedure (second_procedure (p2, p3),
                             third_procedure (p4, p5));

   'indent' assumes that tabs are placed at regular intervals of both
input and output character streams.  These intervals are by default 8
columns wide, but (as of version 1.2) may be changed by the '-ts'
option.  Tabs are treated as the equivalent number of spaces.

   The indentation of type declarations in old-style function
definitions is controlled by the '-ip' parameter.  This is a numeric
parameter specifying how many spaces to indent type declarations.  For
example, the default '-ip5' makes definitions look like this:

     char *
     create_world (x, y, scale)
          int x;
          int y;
          float scale;
     {
       . . .
     }

   For compatibility with other versions of indent, the option '-nip' is
provided, which is equivalent to '-ip0'.

   ANSI C allows white space to be placed on preprocessor command lines
between the character '#' and the command name.  By default, 'indent'
retains this space, but specifying the '-nlps' option directs 'indent'
to remove the whitespace.

   Alternatively, you may use the '-ppi' option to insert spaces,
indenting the preprocessor keywords (after first removing any existing
spacing between the character '#' and preprocessor keywords).  This
option overrides '-lps'.

   Use the '-eei' option to tell 'indent' to improve readability of
continuation lines from the expression part of 'if(e)', 'while(e)',
'for(e;e;e)' by indenting an extra tab stop so that they do not conflict
with the code that follows.


File: indent.info,  Node: Disabling Formatting,  Next: Other Languages,  Prev: Indentation,  Up: Indent Program

Disabling Formatting
====================

Formatting of C code may be disabled for portions of a program by
embedding special "control comments" in the program.  To turn off
formatting for a section of a program, place the disabling control
comment

     /* *INDENT-OFF* */

   on a line by itself just before that section.  Program text scanned
after this control comment is output precisely as input with no
modifications until the corresponding enabling comment is scanned on a
line by itself.  The disabling control comment is

     /* *INDENT-ON* */

   and any text following the comment on the line is also output
unformatted.  Formatting begins again with the input line following the
enabling control comment.

   More precisely, 'indent' does not attempt to verify the closing
delimiter ('*/') for these C comments, and any whitespace on the line is
totally transparent.

   These control comments also function in their C++ formats, namely

     // *INDENT-OFF*

   and

     // *INDENT-ON*

   It should be noted that the internal state of 'indent' remains
unchanged over the course of the unformatted section.  Thus, for
example, turning off formatting in the middle of a function and
continuing it after the end of the function may lead to bizarre results.
It is therefore wise to be somewhat modular in selecting code to be left
unformatted.

   As a historical note, some earlier versions of 'indent' produced
error messages beginning with '*INDENT**'.  These versions of 'indent'
were written to ignore any input text lines which began with such error
messages.

   You may also override the formatting of assignment statements by
using a '/* *INDENT-EQLS* */' comment.  This tells 'indent' to use the
next statement as a hint of how it and subsequent statements (up to the
next blank line) should be formatted.  It uses the first "binary
operator" (such as '=') on the line as a marker.  The resulting line
will put that operator in the same column, and align the first "binary
operator" on subsequent lines in the same column.

   Here is an example of how it might be used:

     /* *INDENT-EQLS* */
     dimensions = 2;
     x          = 5;
     y          += 6;


File: indent.info,  Node: Other Languages,  Next: Miscellaneous options,  Prev: Disabling Formatting,  Up: Indent Program

Other Languages
===============

In addition to recognizing C++ comments (which are now standard in C),
'indent' provides limited support for C++ constructs:

   * It deals with C++ Class::Method, by not splitting the double
     colons.
   * It handles C++ const function declarations like
          const MediaDomainList PVR::get_itsMediaDomainList() const
     by ignoring "const" just after a parameter list */

   It also accepts (and currently ignores) a '-c++' option.  This would
be used with an alternate symbol table for C++.

   If you add the '-ly' option, 'indent' also handles for Lex/Yacc
scripts, by formatting the parts which are passed directly to the
output.  Both lex and yacc use the same file structure:
     ``definitions''
     %%
     ``rules''
     %%
     ``literal''
   Anything in the "literal" section is copied to the output, and is
assumed to be C source.  Also, within the "definitions" and "rules"
sections, lex/yacc pass any lines bracketed with %{ and %} to the
output.

   Other C statements within "rules" are not currently formatted.


File: indent.info,  Node: Miscellaneous options,  Next: Bugs,  Prev: Other Languages,  Up: Indent Program

Miscellaneous options
=====================

To find out what version of 'indent' you have, use the command 'indent
--version'.  This will report the version number of 'indent', without
doing any of the normal processing.

   Use the '--help' option to get a usage summary.

   The '-v' option can be used to turn on verbose mode.  When in verbose
mode, 'indent' reports when it splits one line of input into two more
more lines of output, and gives some size statistics at completion.

   The '-D' option can be used to turn on debugging traces.  Its
parameter gives the debugging level (0 is off, 1 is on, 2 is more
verbose).


File: indent.info,  Node: Bugs,  Next: Copyright,  Prev: Miscellaneous options,  Up: Indent Program

Bugs
====

The "-troff" option is strongly deprecated, and is not supported.  A
good thing for someone to do is to rewrite 'indent' to generate TeX
source as a hardcopy output option, among other things.


File: indent.info,  Node: Copyright,  Prev: Bugs,  Up: Indent Program

Copyright
=========

The following copyright notice applies to the 'indent' program.  The
copyright and copying permissions for this manual appear near the
beginning of this document.

     Copyright (C) 1999-2019, 2020 Thomas E. Dickey
     Copyright (C) 1995, 1996 Joseph Arceneaux
     Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996 Free Software Foundation
     Copyright (C) 1985 Sun Microsystems, Inc.
     Copyright (C) 1980 The Regents of the University of California.
     Copyright (C) 1976 Board of Trustees of the University of Illinois.
     All rights reserved.

     Redistribution and use in source and binary forms are permitted
     provided that the above copyright notice and this paragraph are
     duplicated in all such forms and that any documentation,
     advertising materials, and other materials related to such
     distribution and use acknowledge that the software was developed
     by the University of California, Berkeley, the University of Illinois,
     Urbana, and Sun Microsystems, Inc.  The name of either University
     or Sun Microsystems may not be used to endorse or promote products
     derived from this software without specific prior written permission.
     THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
     IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
     WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
     PURPOSE.


File: indent.info,  Node: Option Summary,  Next: Index,  Prev: Indent Program,  Up: Top

Option Summary
**************

Here is a list of all the options for 'indent', alphabetized by short
option.  It is followed by a cross key alphabetized by long option.

'-bacc'
'--blank-lines-after-ifdefs'
     Force blank lines after (and before) ifdefs.
     *Note Blank lines::.

'-bad'
'--blank-lines-after-declarations'
     Force blank lines after the declarations.
     *Note Blank lines::.

'-bap'
'--blank-lines-after-procedures'
     Force blank lines after procedure bodies.
     *Note Blank lines::.

'-bbb'
'--blank-lines-after-block-comments'
     Force blank lines after block comments.
     *Note Blank lines::.

'-bc'
'--blank-lines-after-commas'
     Force newline after comma in declaration.
     *Note Declarations::.

'-bl'
'--braces-after-if-line'
     Put braces on line after 'if', etc.
     *Note Statements::.

'-bliN'
'--brace-indentN'
     Indent braces N spaces.
     *Note Statements::.

'-br'
'--braces-on-if-line'
     Put braces on line with 'if', etc.  and structure declarations
     *Note Statements::.

'-bs'
'--Bill-Shannon'
'--blank-before-sizeof'
     Put a space between 'sizeof' and its argument.
     *Note Statements::.

'-cN'
'--comment-indentationN'
     Put comments to the right of code in column N.
     *Note Comments::.

'-cbiN'
'--case-brace-indentationN'
     Indent braces after a case label N spaces.
     *Note Statements::.

'-cdN'
'--declaration-comment-columnN'
     Put comments to the right of the declarations in column N.
     *Note Comments::.

'-cdb'
'--comment-delimiters-on-blank-lines'
     Put comment delimiters on blank lines.
     *Note Comments::.

'-cdw'
'--cuddle-do-while'
     Cuddle while of 'do {} while;' and preceding '}'.  *Note
     Comments::.

'-ce'
'--cuddle-else'
     Cuddle else and preceding '}'.
     *Note Comments::.

'-ciN'
'--continuation-indentationN'
     Continuation indent of N spaces.
     *Note Statements::.

'-cliN'
'--case-indentationN'
     Case label indent of N spaces.
     *Note Statements::.

'-cpN'
'--else-endif-columnN'
     Put comments to the right of '#else' and '#endif' statements in
     column N.
     *Note Comments::.

'-cs'
'--space-after-cast'
     Put a space after a cast operator.
     *Note Statements::.

'-DN'
'--debugN'
     Enable debugging traces.
     *Note Miscellaneous options::.

'-dN'
'--line-comments-indentationN'
     Set indentation of comments not to the right of code to N spaces.
     *Note Comments::.

'-diN'
'--declaration-indentationN'
     Put variables in column N.
     *Note Declarations::.

'-eei'
'--extra-expression-indentation'
     Indent continuation lines of 'if', 'for' and 'while' statements.
     *Note Indentation::.

'-fc1'
'--format-first-column-comments'
     Format comments in the first column.
     *Note Comments::.

'-fca'
'--format-all-comments'
     Do not disable all formatting of comments.
     *Note Comments::.

'-gnu'
'--gnu-style'
     Use GNU coding style.  This is the default.
     *Note Common styles::.

'-iN'
'--indent-levelN'
'--indentation-levelN'
     Set indentation level to N spaces.
     *Note Indentation::.

'-ipN'
'--parameter-indentationN'
     Indent parameter types in old-style function definitions by N
     spaces.
     *Note Indentation::.

'-kr'
'--k-and-r-style'
'--kernighan-and-ritchie'
'--kernighan-and-ritchie-style'
     Use Kernighan & Ritchie coding style.
     *Note Common styles::.

'-lN'
'--line-lengthN'
     Set maximum line length for non-comment lines to N.
     *Note Comments::.

'-lcN'
'--comment-line-lengthN'
     Set maximum line length for comment formatting to N.
     *Note Comments::.

'-lp'
'--continue-at-parentheses'
     Line up continued lines at parentheses.
     *Note Indentation::.

'-lps'
'--leave-preprocessor-space'
     Leave space between '#' and preprocessor directive.
     *Note Indentation::.

'-nbacc'
'--no-blank-lines-after-ifdefs'
     Do not force blank lines after (and before) ifdefs.
     *Note Blank lines::.

'-nbad'
'--no-blank-lines-after-declarations'
     Do not force blank lines after declarations.
     *Note Blank lines::.

'-nbap'
'--no-blank-lines-after-procedures'
     Do not force blank lines after procedure bodies.
     *Note Blank lines::.

'-nbbb'
'--no-blank-lines-after-block-comments'
     Do not force blank-lines after (before) block comments.
     *Note Blank lines::.

'-nbc'
'--no-blank-lines-after-commas'
     Do not force newlines after commas in declarations.
     *Note Declarations::.

'-ncdb'
'--no-comment-delimiters-on-blank-lines'
     Do not put comment delimiters on blank lines.
     *Note Comments::.

'-ncdw'
'--dont-cuddle-do-while'
     Do not cuddle '}' and the 'while' of a 'do {} while;'.
     *Note Statements::.

'-nce'
'--dont-cuddle-else'
     Do not cuddle '}' and 'else'.
     *Note Statements::.

'-ncs'
'--no-space-after-casts'
     Do not put a space after cast operators.
     *Note Statements::.

'-neei'
'--no-extra-expression-indentation'
     Do not indent continuation lines of 'if', 'for' and 'while'
     statements.
     *Note Indentation::.

'-nfc1'
'--dont-format-first-column-comments'
     Do not format comments in the first column as normal.
     *Note Comments::.

'-nfca'
'--dont-format-comments'
     Do not format any comments.
     *Note Comments::.

'-nip'
'--no-parameter-indentation'
     Zero width indentation for parameters.
     *Note Indentation::.

'-nlp'
'--dont-line-up-parentheses'
     Do not line up parentheses.
     *Note Statements::.

'-nlps'
'--remove-preprocessor-space'
     Remove space between '#' and preprocessor directive.
     *Note Indentation::.

'-npcs'
'--no-space-after-function-call-names'
     Do not put space after the function in function calls.
     *Note Statements::.

'-npsl'
'--dont-break-procedure-type'
     Put the type of a procedure on the same line as its name.
     *Note Declarations::.

'-nsc'
'--dont-star-comments'
     Do not put the '*' character at the left of comments.
     *Note Comments::.

'-nsob'
'--leave-optional-blank-lines'
     Do not swallow optional blank lines.
     *Note Blank lines::.

'-nss'
'--dont-space-special-semicolon'
     Do not force a space before the semicolon after certain statements.
     Disables '-ss'.
     *Note Statements::.

'-nut'
'--no-tabs'
     Use spaces instead of tabs.
     *Note Indentation::.

'-nv'
'--no-verbosity'
     Disable verbose mode.  *Note Miscellaneous options::.

'-orig'
'--original'
'--original-style'
'--berkeley'
'--berkeley-style'
     Use the original Berkeley coding style.
     *Note Common styles::.

'-npro'
'--ignore-profile'
'+ignore-profile'
     Do not read '.indent.pro' files.
     *Note Invoking indent::.

'-o'
'--output'
'--output-file'
     Write an output file, for the case where only one input is given.
     *Note Invoking indent::.

'-pcs'
'--space-after-procedure-calls'
     Insert a space between the name of the procedure being called and
     the '('.
     *Note Statements::.

'-ppiN'
'--preprocessor-indentationN'
     Insert spacing between '#' and preprocessor keywords.  This
     overrides '-lps'.
     *Note Indentation::.

'-psl'
'--procnames-start-lines'
     Put the type of a procedure on the line before its name.
     *Note Declarations::.

'-sc'
'--start-left-side-of-comments'
     Put the '*' character at the left of comments.
     *Note Comments::.

'-sob'
'--swallow-optional-blank-lines'
     Swallow optional blank lines.
     *Note Blank lines::.

'-ss'
'--space-special-semicolon'
     On one-line 'for' and 'while' statements, force a blank before the
     semicolon.
     *Note Statements::.

'-st'
'--standard-output'
     Write to standard output.
     *Note Invoking indent::.

'-T'
     Tell 'indent' the name of type-names.
     *Note Declarations::.

'-ta'
'-auto-typedefs'
     Tell 'indent' to assume names ending with "_t" are type-names.
     *Note Declarations::.

'-tsN'
'--tab-sizeN'
     Set tab size to N spaces.
     *Note Indentation::.

'-ut'
'--use-tabs'
     Use tabs.  This is the default.  *Note Indentation::.

'-v'
'--verbose'
     Enable verbose mode.
     *Note Miscellaneous options::.

'-version'
     Output the version number of 'indent'.
     *Note Miscellaneous options::.

Options' Cross Key
------------------

Here is a list of options alphabetized by long option, to help you find
the corresponding short option.

     --auto-typedefs                                 -ta
     --blank-lines-after-block-comments              -bbb
     --blank-lines-after-commas                      -bc
     --blank-lines-after-declarations                -bad
     --blank-lines-after-procedures                  -bap
     --braces-after-if-line                          -bl
     --brace-indent                                  -bli
     --braces-on-if-line                             -br
     --case-brace-indentation                        -cbiN
     --case-indentation                              -cliN
     --comment-delimiters-on-blank-lines             -cdb
     --comment-indentation                           -cN
     --continuation-indentation                      -ciN
     --continue-at-parentheses                       -lp
     --cuddle-do-while                               -cdw
     --cuddle-else                                   -ce
     --debug                                         -DN
     --declaration-comment-column                    -cdN
     --declaration-indentation                       -diN
     --dont-break-procedure-type                     -npsl
     --dont-cuddle-do-while                          -ncdw
     --dont-cuddle-else                              -nce
     --dont-format-comments                          -nfca
     --dont-format-first-column-comments             -nfc1
     --dont-line-up-parentheses                      -nlp
     --dont-space-special-semicolon                  -nss
     --dont-star-comments                            -nsc
     --else-endif-column                             -cpN
     --format-all-comments                           -fca
     --format-first-column-comments                  -fc1
     --gnu-style                                     -gnu
     --ignore-profile                                -npro
     --indent-level                                  -iN
     --k-and-r-style                                 -kr
     --leave-optional-blank-lines                    -nsob
     --leave-preprocessor-space                      -lps
     --line-comments-indentation                     -dN
     --line-length                                   -lN
     --linux-style                                   -linux
     --no-blank-lines-after-block-comments           -nbbb
     --no-blank-lines-after-commas                   -nbc
     --no-blank-lines-after-declarations             -nbad
     --no-blank-lines-after-procedures               -nbap
     --no-comment-delimiters-on-blank-lines          -ncdb
     --no-space-after-casts                          -ncs
     --no-parameter-indentation                      -nip
     --no-space-after-function-call-names            -npcs
     --no-tabs                                       -nut
     --no-verbosity                                  -nv
     --original                                      -orig
     --parameter-indentation                         -ipN
     --preprocessor-indentation                      -ppiN
     --procnames-start-lines                         -psl
     --space-after-cast                              -cs
     --space-after-procedure-calls                   -pcs
     --space-special-semicolon                       -ss
     --standard-output                               -st
     --start-left-side-of-comments                   -sc
     --swallow-optional-blank-lines                  -sob
     --tab-size                                      -tsN
     --use-tabs                                      -ut
     --verbose                                       -v


File: indent.info,  Node: Index,  Prev: Option Summary,  Up: Top

Index
*****

 [index ]
* Menu:

* +ignore-profile:                       Invoking indent.     (line  64)
* --berkeley:                            Common styles.       (line  42)
* --berkeley-style:                      Common styles.       (line  42)
* --Bill-Shannon:                        Statements.          (line 144)
* --blank-before-sizeof:                 Statements.          (line 144)
* --blank-lines-after-block-comments:    Blank lines.         (line  20)
* --blank-lines-after-commas:            Declarations.        (line  26)
* --blank-lines-after-declarations:      -bad.                (line  15)
* --blank-lines-after-ifdefs:            Blank lines.         (line  14)
* --blank-lines-after-procedures:        -bap.                (line   6)
* --brace-indentN:                       Statements.          (line  39)
* --braces-after-if-line:                Statements.          (line   6)
* --braces-on-if-line:                   Statements.          (line   6)
* --c-plus-plus:                         Other Languages.     (line   6)
* --case-brace-indentationN:             Statements.          (line  84)
* --comment-delimiters-on-blank-lines:   Comments.            (line  90)
* --comment-indentationN:                Comments.            (line  78)
* --continuation-indentationN:           Indentation.         (line   6)
* --continue-at-parentheses:             Indentation.         (line   6)
* --cuddle-do-while:                     Statements.          (line  69)
* --cuddle-else:                         Statements.          (line  49)
* --debug:                               Miscellaneous options.
                                                              (line  16)
* --declaration-comment-columnN:         Comments.            (line  78)
* --declaration-indentationN:            Declarations.        (line   6)
* --dont-break-procedure-type:           Declarations.        (line  37)
* --dont-cuddle-do-while:                Statements.          (line  69)
* --dont-cuddle-else:                    Statements.          (line  49)
* --dont-format-comments:                Comments.            (line  53)
* --dont-format-first-column-comments:   Comments.            (line  53)
* --dont-line-up-parentheses:            Indentation.         (line   6)
* --dont-space-special-semicolon:        Statements.          (line 131)
* --dont-star-comments:                  Comments.            (line  98)
* --else-endif-columnN:                  Comments.            (line  78)
* --extra-expression-indentation:        Indentation.         (line  60)
* --format-all-comments:                 Comments.            (line  53)
* --format-first-column-comments:        Comments.            (line  53)
* --gnu-style:                           Common styles.       (line  12)
* --help:                                Miscellaneous options.
                                                              (line  10)
* --ignore-profile:                      Invoking indent.     (line  64)
* --indent-levelN:                       Indentation.         (line   6)
* --indentation-levelN:                  Indentation.         (line   6)
* --k-and-r-style:                       Common styles.       (line  28)
* --kernighan-and-ritchie:               Common styles.       (line  28)
* --kernighan-and-ritchie-style:         Common styles.       (line  28)
* --leave-optional-blank-lines:          Blank lines.         (line  23)
* --leave-preprocessor-space:            Indentation.         (line  50)
* --lex-or-yacc:                         Other Languages.     (line  18)
* --line-comments-indentationN:          Comments.            (line  67)
* --linux:                               Common styles.       (line  50)
* --no-blank-lines-after-block-comments: Blank lines.         (line  20)
* --no-blank-lines-after-commas:         Declarations.        (line  26)
* --no-blank-lines-after-declarations:   -bad.                (line  15)
* --no-blank-lines-after-ifdefs:         Blank lines.         (line  14)
* --no-blank-lines-after-procedures:     -bap.                (line   6)
* --no-comment-delimiters-on-blank-lines: Comments.           (line  90)
* --no-extra-expression-indentation:     Indentation.         (line  60)
* --no-parameter-indentation:            Indentation.         (line  33)
* --no-space-after-casts:                Statements.          (line 141)
* --no-space-after-function-call-names:  Statements.          (line 137)
* --no-verbosity:                        Miscellaneous options.
                                                              (line  12)
* --original:                            Common styles.       (line  42)
* --original-style:                      Common styles.       (line  42)
* --output:                              Invoking indent.     (line  20)
* --output-file:                         Invoking indent.     (line  20)
* --parameter-indentationN:              Indentation.         (line  33)
* --preprocessor-indentationN:           Indentation.         (line  55)
* --procnames-start-lines:               Declarations.        (line  37)
* --remove-preprocessor-space:           Indentation.         (line  50)
* --space-after-cast:                    Statements.          (line 141)
* --space-after-procedure-calls:         Statements.          (line 137)
* --space-special-semicolon:             Statements.          (line 131)
* --standard-output:                     Invoking indent.     (line  24)
* --start-left-side-of-comments:         Comments.            (line  98)
* --swallow-optional-blank-lines:        Blank lines.         (line  23)
* --tab-sizeN:                           Indentation.         (line  28)
* --usage:                               Miscellaneous options.
                                                              (line  10)
* --verbose:                             Miscellaneous options.
                                                              (line  12)
* --version:                             Miscellaneous options.
                                                              (line   6)
* -auto-typedefs:                        Declarations.        (line  52)
* -bacc:                                 Blank lines.         (line  14)
* -bad:                                  -bad.                (line  15)
* -bap:                                  -bap.                (line   6)
* -bbb:                                  Blank lines.         (line  20)
* -bc:                                   Declarations.        (line  26)
* -bl:                                   Statements.          (line   6)
* -bliN:                                 Statements.          (line  39)
* -br:                                   Statements.          (line   6)
* -bs:                                   Statements.          (line 144)
* -c++:                                  Other Languages.     (line   6)
* -cbiN:                                 Statements.          (line  84)
* -cdb:                                  Comments.            (line  90)
* -cdN:                                  Comments.            (line  78)
* -cdw:                                  Statements.          (line  69)
* -ce:                                   Statements.          (line  49)
* -ciN:                                  Indentation.         (line   6)
* -cN:                                   Comments.            (line  78)
* -cpN:                                  Comments.            (line  78)
* -cs:                                   Statements.          (line 141)
* -D:                                    Miscellaneous options.
                                                              (line  16)
* -diN:                                  Declarations.        (line   6)
* -dN:                                   Comments.            (line  67)
* -eei:                                  Indentation.         (line  60)
* -fc1:                                  Comments.            (line  53)
* -fca:                                  Comments.            (line  53)
* -gnu:                                  Common styles.       (line  12)
* -h:                                    Miscellaneous options.
                                                              (line  10)
* -iN:                                   Indentation.         (line   6)
* -ipN:                                  Indentation.         (line  33)
* -kr:                                   Common styles.       (line  28)
* -lp:                                   Indentation.         (line   6)
* -lps:                                  Indentation.         (line  50)
* -ly:                                   Other Languages.     (line  18)
* -nbacc:                                Blank lines.         (line  14)
* -nbad:                                 -bad.                (line  15)
* -nbap:                                 -bap.                (line   6)
* -nbbb:                                 Blank lines.         (line  20)
* -nbc:                                  Declarations.        (line  26)
* -ncdb:                                 Comments.            (line  90)
* -ncdw:                                 Statements.          (line  69)
* -nce:                                  Statements.          (line  49)
* -ncs:                                  Statements.          (line 141)
* -neei:                                 Indentation.         (line  60)
* -nfc1:                                 Comments.            (line  53)
* -nfca:                                 Comments.            (line  53)
* -nip:                                  Indentation.         (line  33)
* -nlp:                                  Indentation.         (line   6)
* -nlps:                                 Indentation.         (line  50)
* -npcs:                                 Statements.          (line 137)
* -npro:                                 Invoking indent.     (line  64)
* -npsl:                                 Declarations.        (line  37)
* -nsc:                                  Comments.            (line  98)
* -nsob:                                 Blank lines.         (line  23)
* -nss:                                  Statements.          (line 131)
* -nv:                                   Miscellaneous options.
                                                              (line  12)
* -o:                                    Invoking indent.     (line  20)
* -orig:                                 Common styles.       (line  42)
* -pcs:                                  Statements.          (line 137)
* -ppiN:                                 Indentation.         (line  55)
* -psl:                                  Declarations.        (line  37)
* -sc:                                   Comments.            (line  98)
* -sob:                                  Blank lines.         (line  23)
* -ss:                                   Statements.          (line 131)
* -st:                                   Invoking indent.     (line  24)
* -T:                                    Declarations.        (line  42)
* -ta:                                   Declarations.        (line  52)
* -tsN:                                  Indentation.         (line  28)
* -v:                                    Miscellaneous options.
                                                              (line  12)
* .indent.pro file:                      Invoking indent.     (line  64)
* Beginning indent:                      Invoking indent.     (line   6)
* Berkeley style:                        Common styles.       (line  42)
* Blank lines:                           Blank lines.         (line   6)
* Comments:                              Comments.            (line   6)
* etags requires -psl:                   Declarations.        (line  37)
* GNU style:                             Common styles.       (line  12)
* Initialization file:                   Invoking indent.     (line  64)
* Invoking indent:                       Invoking indent.     (line   6)
* Kernighan & Ritchie style:             Common styles.       (line  28)
* Linux style:                           Common styles.       (line  50)
* Long options, use of:                  Invoking indent.     (line  41)
* Original Berkeley style:               Common styles.       (line  42)
* Output File Specification:             Invoking indent.     (line  20)
* Standard Output:                       Invoking indent.     (line  24)
* Starting indent:                       Invoking indent.     (line   6)
* Typenames:                             Declarations.        (line  42)
* Typenames <1>:                         Declarations.        (line  52)
* Using Standard Input:                  Invoking indent.     (line  28)



Tag Table:
Node: Top638
Node: Indent Program1140
Node: Invoking indent2222
Ref: Invoking indent-Footnote-15933
Node: Backup files6022
Node: Common styles7882
Node: Blank lines10419
Node: -bad11634
Node: -bap12274
Node: Comments13129
Node: Statements17915
Node: Declarations21336
Node: Indentation22988
Node: Disabling Formatting25771
Node: Other Languages28072
Node: Miscellaneous options29271
Node: Bugs30009
Node: Copyright30317
Node: Option Summary31810
Node: Index43853

End Tag Table
