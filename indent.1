'\" t
.TH INDENT 1
.de NS
.ie n  .sp
.el    .sp .5
.ie n  .in +4
.el    .in +2
.nf
.ft C \" Courier
..
.de NE
.fi
.ft R
.ie n  .in -4
.el    .in -2
..
.SH NAME
indent - indent.info
.PP
.\" This is indent.info, produced by makeinfo version 4.13 from
.\" \./indent.texinfo.
.\" 
.\" INFO\-DIR\-SECTION Indent Code Formatter
.\" START\-INFO\-DIR\-ENTRY
.\" * CIndent: (cindent).           C code formatter (fork).
.\" END\-INFO\-DIR\-ENTRY
.\" 
.\"    Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996 Free Software
.\" Foundation, Inc.
.\" Copyright (C) 1995, 1996 Joseph Arceneaux
.\" Copyright (C) 1999\-2010, 2016 Thomas E. Dickey
.\" 
.\"    This is Edition 2.0, May, 2016, of \fBThe indent Manual\fP, for Indent
.\" Version 2.0
.\" 
.\"    Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.SH \fBindent\fR:  Indent and Format C Program Source
The \fBindent\fR program changes the appearance of a C program by inserting
or deleting whitespace.
.PP
This is Edition 2.0, May 2016, of \fBThe indent Manual\fP, for Indent
Version 2.0
.TS
l l
l l .
Menu:
Indent Program	see \fBThe \fBindent\fR Program\fR
Option Summary	see \fBOption Summary\fR
Index	see \fBIndex\fR
.TE
.SH The \fBindent\fR Program
The \fBindent\fR program can be used to make code easier to read
It can
also convert from one style of writing C to another.
\fBindent\fR understands a substantial amount about the syntax of C, but it
also attempts to cope with incomplete and misformed syntax.
.PP
In version 1.2 and more recent versions, the GNU style of indenting
is the default.
.TS
l l
l l .
Menu:
Invoking indent	see \fBInvoking \fBindent\fR\fR
Backup files	see \fBBackup Files\fR
Common styles	see \fBCommon styles\fR
Blank lines	see \fBBlank lines\fR
Comments	see \fBComments\fR
Statements	see \fBStatements\fR
Declarations	see \fBDeclarations\fR
Indentation	see \fBIndentation\fR
Disabling Formatting	see \fBDisabling Formatting\fR
Other Languages	see \fBOther Languages\fR
Miscellaneous options	see \fBMiscellaneous options\fR
Bugs	see \fBBugs\fR
Copyright	see \fBCopyright\fR
.TE
.SH Invoking \fBindent\fR
As of version 1.3, the format of the \fBindent\fR command is:
.NS
indent [OPTIONS] [INPUT\-FILES]
.sp
indent [OPTIONS] [SINGLE\-INPUT\-FILE] [\-o OUTPUT\-FILE]
.NE
.PP
This format is different from earlier versions and other versions of
\fBindent\fR.
.PP
In the first form, one or more input files are specified
\fBindent\fR
makes a backup copy of each file, and the original file is replaced with
its indented version
(see \fBBackup files\fR), for an explanation of how
backups are made.
.PP
In the second form, only one input file is specified
In this case,
or when the standard input is used, you may specify an output file after
the \fB\-o\fR option.
.PP
To cause \fBindent\fR to write to standard output, use the \fB\-st\fR option.
This is only allowed when there is only one input file, or when the
standard input is used.
.PP
If no input files are named, the standard input is read for input.
Also, if a filename named \fB\-\fR is specified, then the standard input is
read.
.PP
As an example, each of the following commands will input the program
\fBslithy_toves.c\fR and write its indented text to \fBslithy_toves.out\fR:
.NS
indent slithy_toves.c \-o slithy_toves.out
.sp
indent \-st slithy_toves.c > slithy_toves.out
.sp
cat slithy_toves.c | indent \-o slithy_toves.out
.NE
.PP
Most other options to \fBindent\fR control how programs are formatted.
As of version 1.2, \fBindent\fR also recognizes a long name for each option
name
Long options are prefixed by either \fB\-\-\fR or \fB+\fR.(*) In most of
this document, the traditional, short names are used for the sake of
brevity
(see \fBOption Summary\fR), for a list of options, including both
long and short names.
.PP
Here is another example:
.NS
indent \-br test/metabolism.c \-l85
.NE
.PP
This will indent the program \fBtest/metabolism.c\fR using the \fB\-br\fR and
\fB\-l85\fR options, write the output back to \fBtest/metabolism.c\fR, and write
the original contents of \fBtest/metabolism.c\fR to a backup file in the
directory \fBtest\fR.
.PP
Equivalent invocations using long option names for this example would
be:
.NS
indent \-\-braces\-on\-if\-line \-\-line\-length185 test/metabolism.c
.sp
indent +braces\-on\-if\-line +line\-length185 test/metabolism.c
.NE
.PP
If you find that you often use \fBindent\fR with the same options, you
may put those options into a file named \fB.indent.pro\fR
\fBindent\fR will
first look for \fB.indent.pro\fR in the current directory and use that if
found
Otherwise, \fBindent\fR will search your home directory for
\fB.indent.pro\fR and use that file if it is found
This behaviour is
different from that of other versions of \fBindent\fR, which load both
files if they both exist.
.PP
The format of \fB.indent.pro\fR is simply a list of options, just as
they would appear on the command line, separated by white space (tabs,
spaces, and newlines)
Options in \fB.indent.pro\fR may be surrounded by C
or C++ comments, in which case they are ignored.
.PP
Most command line switches are handled _after_ processing
\fB.indent.pro\fR
Options specified later override arguments specified
earlier, with one exception: Explicitly specified options always
override background options (see \fBCommon styles\fR).
.PP
You can prevent \fBindent\fR from reading an \fB.indent.pro\fR file by
specifying the \fB\-npro\fR option.
.PP
Alternatively, you can tell \fBindent\fR to read a profile from any file
using the \fB\-\-profile\fR option
The option accepts a parameter which can
be either an absolute pathname (beginning with a \fB/\fR), or relative
If
the pathname is relative, \fBindent\fR searches in the current and home
directories just like the \fB.indent.pro\fR file
The \fB\-npro\fR option
overrides this, as well.
.PP
\-\-\-\-\-\-\-\-\-\- Footnotes \-\-\-\-\-\-\-\-\-\-
.PP
(*)  \fB+\fR is being superseded by \fB\-\-\fR to maintain consistency with
the POSIX standard.
.SH Backup Files
As of version 1.3, GNU \fBindent\fR makes GNU\-style backup files, the same
way GNU Emacs does
This means that either "simple" or "numbered"
backup filenames may be made.
.PP
Simple backup file names are generated by appending a suffix to the
original file name
The default for the this suffix is the
one\-character string \fB~\fR (tilde)
Thus, the backup file for \fBpython.c\fR
would be \fBpython.c~\fR.
.PP
Instead of the default, you may specify any string as a suffix by
setting the environment variable \fBSIMPLE_BACKUP_SUFFIX\fR to your
preferred suffix.
.PP
Numbered backup versions of a file \fBmomewraths\fR look like
\fBmomewraths.c.~23~\fR, where 23 is the version of this particular backup.
When making a numbered backup of the file \fBsrc/momewrath.c\fR, the backup
file will be named \fBsrc/momewrath.c.~V~\fR, where V is one greater than
the highest version currently existing in the directory \fBsrc\fR.
.PP
The type of backup file made is controlled by the value of the
environment variable \fBVERSION_CONTROL\fR
If it is the string \fBsimple\fR,
then only simple backups will be made
If its value is the string
\fBnumbered\fR, then numbered backups will be made
If its value is
\fBnumbered\-existing\fR, then numbered backups will be made if there
*already exist* numbered backups for the file being indented;
otherwise, a simple backup is made
If \fBVERSION_CONTROL\fR is not set,
then \fBindent\fR assumes the behaviour of \fBnumbered\-existing\fR.
.PP
Other versions of \fBindent\fR use the suffix \fB.BAK\fR in naming backup
files
This behaviour can be emulated by setting
\fBSIMPLE_BACKUP_SUFFIX\fR to \fB.BAK\fR.
.PP
Note also that other versions of \fBindent\fR make backups in the
current directory, rather than in the directory of the source file as
GNU \fBindent\fR now does.
.SH Common styles
There are several common styles of C code, including the GNU style, the
Kernighan & Ritchie style, and the original Berkeley style
A style may
be selected with a single "background" option, which specifies a set of
values for all other options
However, explicitly specified options
always override options implied by a background option.
.PP
As of version 1.2, the default style of GNU \fBindent\fR is the GNU
style
Thus, it is no longer neccessary to specify the option \fB\-gnu\fR
to obtain this format, although doing so will not cause an error.
Option settings which correspond to the GNU style are:
.NS
\-nbad \-bap \-nbc \-bl \-ncdb \-cs \-nce \-di2 \-ndj
\-ei \-nfc1 \-i2 \-ip5 \-lp \-pcs \-npsl \-psl \-nsc \-nsob \-bli2
\-cp1 \-nfca
.NE
.PP
The GNU coding style is that preferred by the GNU project
It is the
style that the GNU Emacs C mode encourages and which is used in the C
portions of GNU Emacs
(People interested in writing programs for
Project GNU should get a copy of \fBThe GNU Coding Standards\fR, which also
covers semantic and portability issues such as memory usage, the size
of integers, etc.)
.PP
The Kernighan & Ritchie style is used throughout their well\-known
book \fBThe C Programming Language\fR
It is enabled with the \fB\-kr\fR
option
The Kernighan & Ritchie style corresponds to the following set
of options:
.NS
\-nbad \-bap \-nbc \-br \-c33 \-cd33 \-ncdb \-ce \-ci4
\-cli0 \-cp33 \-d0 \-di1 \-nfc1 \-nfca \-i4 \-ip0 \-l75 \-lp
\-npcs \-npsl \-nsc \-nsob \-nss \-cs
.NE
.PP
Kernighan & Ritchie style does not put comments to the right of code in
the same column at all times (nor does it use only one space to the
right of the code), so for this style \fBindent\fR has arbitrarily chosen
column 33.
.PP
The style of the original Berkeley \fBindent\fR may be obtained by
specifying \fB\-orig\fR (or by specifyfying \fB\-\-original\fR, using the long
option name)
This style is equivalent to the following settings:
.NS
\-nbap \-nbad \-bc \-br \-c33 \-cd33 \-cdb \-ce \-ci4
\-cli0 \-cp33 \-di16 \-fc1 \-fca \-i4 \-ip4 \-l75 \-lp
\-npcs \-psl \-sc \-nsob \-nss \-ts8
.NE
.PP
.SH Blank lines
Various programming styles use blank lines in different places.
\fBindent\fR has a number of options to insert or delete blank lines in
specific places.
.PP
The \fB\-bad\fR option causes \fBindent\fR to force a blank line after every
block of declarations
The \fB\-nbad\fR option causes \fBindent\fR not to force
such blank lines.
.PP
The \fB\-bacc\fR option forces a blank line after (before) every ifdef
group
The \fB\-nbacc\fR option forces no such blank line.
.PP
The \fB\-bap\fR option forces a blank line after every procedure body.
The \fB\-nbap\fR option forces no such blank line.
.PP
The \fB\-bbb\fR option forces a blank line before every boxed comment.
(see \fBComments\fR) The \fB\-nbbb\fR option does not force such blank lines.
.PP
The \fB\-sob\fR option causes \fBindent\fR to swallow optional blank lines
(that is, any optional blank lines present in the input will be removed
from the output)
If the \fB\-nsob\fR is specified, any blank lines present
in the input file will be copied to the output file.
.TS
l l
l l .
Menu:
\-bad	see \fBMore on the \fB\-bad\fR option.\fR
\-bap	see \fBMore on the \fB\-bap\fR option.\fR
.TE
.SS \-\-blank\-lines\-after\-declarations
The \fB\-bad\fR option forces a blank line after every block of
declarations
The \fB\-nbad\fR option does not add any such blank lines.
.PP
For example, given the input
.NS
char *foo;
char *bar;
/* This separates blocks of declarations
*/
int baz;
.NE
.PP
\fBindent \-bad\fR produces
.NS
char *foo;
char *bar;
.sp
/* This separates blocks of declarations
*/
int baz;
.NE
.PP
and \fBindent \-nbad\fR produces
.NS
char *foo;
char *bar;
/* This separates blocks of declarations
*/
int baz;
.NE
.PP
.SS \-\-blank\-lines\-after\-procedures
.PP
The \fB\-bap\fR option forces a blank line after every procedure body.
.PP
For example, given the input
.NS
int
foo ()
{
  puts("Hi");
}
/* The procedure bar is even less interesting
*/
char *
bar ()
{
  puts("Hello");
}
.NE
.PP
\fBindent \-bap\fR produces
.NS
int
foo ()
{
  puts ("Hi");
}
.sp
/* The procedure bar is even less interesting
*/
char *
bar ()
{
  puts ("Hello");
}
.NE
.PP
and \fBindent \-nbap\fR produces
.NS
int
foo ()
{
  puts ("Hi");
}
/* The procedure bar is even less interesting
*/
char *
bar ()
{
  puts ("Hello");
}
.NE
.PP
No blank line will be added after the procedure \fBfoo\fR.
.SH Comments
\fBindent\fR formats both C and C++ comments
C comments are begun with
\fB/*\fR, terminated with \fB*/\fR and may contain newline characters
C++
comments begin with the delimiter \fB//\fR and end at the newline.
.PP
\fBindent\fR handles comments differently depending upon their context.
\fBindent\fR attempts to distinguish amongst comments which follow
statements, comments which follow declarations, comments following
preprocessor directives, and comments which are not preceded by code of
any sort, i.e., they begin the text of the line (although not
neccessarily in column 1).
.PP
\fBindent\fR further distinguishes between comments found outside of
procecures and aggregates, and those found within them
In particular,
comments beginning a line found within a procedure will be indented to
the column at which code is currently indented
The exception to this a
comment beginning in the leftmost column;  such a comment is output at
that column.
.PP
\fBindent\fR attempts to leave "boxed comments" unmodified
The general
idea of such a comment is that it is enclosed in a rectangle or "box"
of stars or dashes to visually set it apart
More precisely, boxed
comments are defined as those in which the initial \fB/*\fR is followed
immediately by the character \fB*\fR, \fB=\fR, \fB_\fR, or \fB\-\fR, or those in which
the beginning comment delimiter (\fB/*\fR) is on a line by itself, and the
following line begins with a \fB*\fR in the same column as the star of the
opening delimiter.
.PP
Examples of boxed comments are:
.NS
/**********************
 * Comment in a box!! *
 **********************/
.sp
       /*
        * A different kind of scent,
        * for a different kind of comment.
        */
.NE
.PP
\fBindent\fR attempts to leave boxed comments exactly as they are found
in the source file
Thus the indentation of the comment is unchanged,
and its length is not checked in any way
The only alteration made is
that an embedded tab character may be converted into the appropriate
number of spaces.
.PP
If the \fB\-bbb\fR option is specified, all such boxed comments will be
preceded by a blank line, unless such a comment is preceded by code.
.PP
Comments which are not boxed comments may be formatted, which means
that the line is broken to fit within a right margin and left\-filled
with whitespace
Single newlines are equivalent to a space, but blank
lines (two or more newlines in a row) are taken to mean a paragraph
break
Formatting of comments which begin after the first column is
enabled with the \fB\-fca\fR option
To format those beginning in column
one, specify \fB\-fc1\fR
Such formatting is disabled by default.
.PP
The right margin for formatting defaults to 78, but may be changed
with the \fB\-lc\fR option
If the margin specified does not allow the
comment to be printed, the margin will be automatically extended for the
duration of that comment
The margin is not respected if the comment is
not being formatted.
.PP
If the comment begins a line (i.e., there is no program text to its
left), it will be indented to the column it was found in unless the
comment is within a block of code
In that case, such a comment will be
aligned with the indented code of that block (unless the comment began
in the first column)
This alignment may be affected by the \fB\-d\fR
option, which specifies an amount by which such comments are moved to
the *left*, or unindented
For example, \fB\-d2\fR places comments two
spaces to the left of code
By default, comments are aligned with
code, unless they begin in the first column, in which case they are left
there by default \- to get them aligned with the code, specify \fB\-fc1\fR.
.PP
Comments to the right of code will appear by default in column 33.
This may be changed with one of three options
\fB\-c\fR will specify the
column for comments following code, \fB\-cd\fR specifies the column for
comments following declarations, and \fB\-cp\fR specifies the column for
comments following preprocessor directives \fB#else\fR and \fB#endif\fR.
.PP
If the code to the left of the comment exceeds the beginning column,
the comment column will be extended to the next tabstop column past the
end of the code, or in the case of preprocessor directives, to one
space past the end of the directive
This extension lasts only for the
output of that particular comment.
.PP
The \fB\-cdb\fR option places the comment delimiters on blank lines.
Thus, a single line comment like \fB/* Claustrophobia */\fR can be
transformed into:
.NS
/*
   Claustrophobia
 */
.NE
.PP
Stars can be placed at the beginning of multi\-line comments with the
\fB\-sc\fR option
Thus, the single\-line comment above can be transformed
(with \fB\-cdb \-sc\fR) into:
.NS
/*
 * Claustrophobia
 */
.NE
.PP
.SH Statements
The \fB\-br\fR or \fB\-bl\fR option specifies how to format braces.
.PP
The \fB\-br\fR option formats statement braces like this:
.NS
if (x > 0) {
  x\-\-;
}
.NE
.PP
The \fB\-bl\fR option formats them like this:
.NS
if (x > 0)
  {
    x\-\-;
  }
.NE
.PP
These options also affect structure and enumeration declarations.
The \fB\-br\fR option produces structure declarations like the following:
.NS
struct Sname {
    int i;
    char chp;
} Vname;
.NE
.PP
The default behaviour, also obtained by specifying \fB\-bl\fR, would
yield the following format for the same declaration:
.NS
struct Sname
  {
     int i;
     char chp;
  }
Vname;
.NE
.PP
If you use the \fB\-bl\fR option, you may also want to specify the \fB\-bli\fR
option
This option specifies the number of spaces by which braces are
indented
\fB\-bli2\fR, the default, gives the result shown above
\fB\-bli0\fR
results in the following:
.NS
if (x > 0)
{
  x\-\-;
}
.NE
.PP
If you are using the \fB\-br\fR option, you probably want to also use the
\fB\-ce\fR option
This causes the \fBelse\fR in an if\-then\-else construct to
cuddle up to the immediately preceding \fB}\fR
For example, with `\-br
\-ce' you get the following:
.NS
if (x > 0) {
  x\-\-;
} else {
  fprintf (stderr, "...something wrong?\en");
}
.NE
.PP
With \fB\-br \-nce\fR that code would appear as
.NS
if (x > 0) {
  x\-\-;
}
else {
  fprintf (stderr, "...something wrong?\en");
}
.NE
.PP
The \fB\-cli\fR option specifies the number of spaces that case labels
should be indented to the right of the containing \fBswitch\fR statement.
.PP
If a semicolon is on the same line as a \fBfor\fR or \fBwhile\fR statement,
the \fB\-ss\fR option will cause a space to be placed before the semicolon.
This emphasizes the semicolon, making it clear that the body of the
\fBfor\fR or \fBwhile\fR statement is an empty statement
\fB\-nss\fR disables this
feature.
.PP
The \fB\-pcs\fR option causes a space to be placed between the name of
the procedure being called and the \fB(\fR (for example, \fBputs ("Hi");\fR.
The \fB\-npcs\fR option would give \fBputs("Hi");\fR).
.PP
If the \fB\-cs\fR option is specified, \fBindent\fR puts a space after a cast
operator.
.PP
The \fB\-bs\fR option ensures that there is a space between the keyword
\fBsizeof\fR and its argument
In some versions, this is known as the
\fBBill_Shannon\fR option.
.SH Declarations
By default \fBindent\fR will line up identifiers, in the column specified
by the \fB\-di\fR option
For example, \fB\-di16\fR makes things look like:
.NS
int             foo;
char           *bar;
.NE
.PP
Using a small value (such as one or two) for the \fB\-di\fR option can be
used to cause the indentifiers to be placed in the first available
position, for example
.NS
int foo;
char *bar;
.NE
.PP
The value given to the \fB\-di\fR option will still affect variables
which are put on separate lines from their types, for example \fB\-di2\fR
will lead to
.NS
int
  foo;
.NE
.PP
If the \fB\-bc\fR option is specified, a newline is forced after each
comma in a declaration
For example,
.NS
int a,
  b,
  c;
.NE
.PP
With the \fB\-nbc\fR option this would look like
.NS
int a, b, c;
.NE
.PP
The \fB\-psl\fR option causes the type of a procedure being defined to be
placed on the line before the name of the procedure
This style is
required for the \fBetags\fR program to work correctly, as well as some of
the \fBc\-mode\fR functions of Emacs.
.PP
You should use the \fB\-T\fR option to tell \fBindent\fR the name of all the
typenames in your program that are defined by \fBtypedef\fR
\fB\-T\fR can be
specified more than once, and all names specified are used
For
example, if your program contains
.NS
typedef unsigned long CODE_ADDR;
typedef enum {red, blue, green} COLOR;
.NE
.PP
you would use the options \fB\-T CODE_ADDR \-T COLOR\fR.
.PP
You may also use the \fB\-ta\fR option to tell \fBindent\fR to interpret
identifiers ending with "_t" as if they were typenames declared by \fB\-T\fR.
.SH Indentation
One issue in the formatting of code is how far each line should be
indented from the left margin
When the beginning of a statement such
as \fBif\fR or \fBfor\fR is encountered, the indentation level is increased by
the value specified by the \fB\-i\fR option
For example, use \fB\-i8\fR to
specify an eight character indentation for each level
When a
statement is broken across two lines, the second line is indented by a
number of additional spaces specified by the \fB\-ci\fR option
\fB\-ci\fR
defaults to 0
However, if the \fB\-lp\fR option is specified, and a line
has a left parenthesis which is not closed on that line, then
continuation lines will be lined up to start at the character position
just after the left parenthesis
This processing also applies to \fB[\fR
and applies to \fB{\fR when it occurs in initialization lists
For
example, a piece of continued code might look like this with `\-nlp
\-ci3' in effect:
.NS
  p1 = first_procedure (second_procedure (p2, p3),
     third_procedure (p4, p5));
.NE
.PP
With \fB\-lp\fR in effect the code looks somewhat clearer:
.NS
  p1 = first_procedure (second_procedure (p2, p3),
                        third_procedure (p4, p5));
.NE
.PP
\fBindent\fR assumes that tabs are placed at regular intervals of both
input and output character streams
These intervals are by default 8
columns wide, but (as of version 1.2) may be changed by the \fB\-ts\fR
option
Tabs are treated as the equivalent number of spaces.
.PP
The indentation of type declarations in old\-style function
definitions is controlled by the \fB\-ip\fR parameter
This is a numeric
parameter specifying how many spaces to indent type declarations
For
example, the default \fB\-ip5\fR makes definitions look like this:
.NS
char *
create_world (x, y, scale)
     int x;
     int y;
     float scale;
{
  

.
}
.NE
.PP
For compatibility with other versions of indent, the option \fB\-nip\fR
is provided, which is equivalent to \fB\-ip0\fR.
.PP
ANSI C allows white space to be placed on preprocessor command lines
between the character \fB#\fR and the command name
By default, \fBindent\fR
retains this space, but specifying the \fB\-nlps\fR option directs \fBindent\fR
to remove the whitespace.
.PP
Alternatively, you may use the \fB\-ppi\fR option to insert spaces,
indenting the preprocessor keywords (after first removing any existing
spacing between the character \fB#\fR and preprocessor keywords)
This
option overrides \fB\-lps\fR.
.PP
Use the \fB\-eei\fR option to tell \fBindent\fR to improve readability of
continuation lines from the expression part of \fBif(e)\fR, \fBwhile(e)\fR,
\fBfor(e;e;e)\fR by indenting an extra tab stop so that they do not
conflict with the code that follows.
.SH Disabling Formatting
Formatting of C code may be disabled for portions of a program by
embedding special "control comments" in the program
To turn off
formatting for a section of a program, place the disabling control
comment \fB/* *INDENT\-OFF* */\fR on a line by itself just before that
section
Program text scanned after this control comment is output
precisely as input with no modifications until the corresponding
enabling comment is scanned on a line by itself
The disabling control
comment is \fB/* *INDENT\-ON* */\fR, and any text following the comment on
the line is also output unformatted
Formatting begins again with the
input line following the enabling control comment.
.PP
More precisely, \fBindent\fR does not attempt to verify the closing
delimiter (\fB*/\fR) for these C comments, and any whitespace on the line
is totally transparent.
.PP
These control comments also function in their C++ formats, namely
\fB// *INDENT\-OFF*\fR and \fB// *INDENT\-ON*\fR.
.PP
It should be noted that the internal state of \fBindent\fR remains
unchanged over the course of the unformatted section
Thus, for
example, turning off formatting in the middle of a function and
continuing it after the end of the function may lead to bizarre
results
It is therefore wise to be somewhat modular in selecting code
to be left unformatted.
.PP
As a historical note, some earlier versions of \fBindent\fR produced
error messages beginning with \fB*INDENT**\fR
These versions of \fBindent\fR
were written to ignore any input text lines which began with such error
messages.
.PP
You may also override the formatting of assignment statements by
using and \fB/* *INDENT\-EQLS* */\fR comment
This tells \fBindent\fR to use
the next statement as a hint of how it and subsequent statements (up to
the next blank line) should be formatted
It uses the first "binary
operator" (such as \fB=\fR) on the line as a marker
The resulting line
will put that operator in the same column, and align the first "binary
operator" on subsequent lines in the same column.
.PP
Here is an example of how it might be used:
.NS
/* *INDENT\-EQLS* */
dimensions = 2;
x          = 5;
y          += 6;
.NE
.PP
.SH Other Languages
In addition to recognizing C++ comments (which are now standard in C),
\fBindent\fR provides limited support for C++ constructs:
.PP
* It deals with C++ Class::Method, by not splitting the double
.NS
colons.
.NE
.PP
* It handles C++ const function declarations like
.NS
     const MediaDomainList PVR::get_itsMediaDomainList() const
by ignoring "const" just after a parameter list */
.NE
.PP
It also accepts (and currently ignores) a \fB\-c++\fR option
This would
be used with an alternate symbol table for C++.
.PP
If you add the \fB\-ly\fR option, \fBindent\fR also handles for Lex/Yacc
scripts, by formatting the parts which are passed directly to the
output
Both lex and yacc use the same file structure:
.NS
\fBdefinitions\fR
%%
\fBrules\fR
%%
\fBliteral\fR
Anything in the "literal" section is copied to the output, and is
assumed to be C source
Also, within the "definitions" and "rules"
sections, lex/yacc pass any lines bracketed with %{ and %} to the
output.
.NE
.PP
Other C statements within "rules" are not currently formatted.
.SH Miscellaneous options
To find out what version of \fBindent\fR you have, use the command `indent
\-\-version'
This will report the version number of \fBindent\fR, without
doing any of the normal processing.
.PP
Use the \fB\-\-help\fR option to get a usage summary.
.PP
The \fB\-v\fR option can be used to turn on verbose mode
When in
verbose mode, \fBindent\fR reports when it splits one line of input into
two more more lines of output, and gives some size statistics at
completion.
.PP
The \fB\-D\fR option can be used to turn on debugging traces
Its
parameter gives the debugging level (0 is off, 1 is on, 2 is more
verbose).
.SH Bugs
The "\-troff" option is strongly deprecated, and is not supported
A
good thing for someone to do is to rewrite \fBindent\fR to generate TeX
source as a hardcopy output option, amoung other things.
.SH Copyright
The following copyright notice applies to the \fBindent\fR program
The
copyright and copying permissions for this manual appear near the
beginning of this document.
.NS
Copyright 1999\-2002, 2010 Thomas E
Dickey
Copyright (C) 1995, 1996 Joseph Arceneaux
Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996 Free Software Foundation
Copyright (C) 1985 Sun Microsystems, Inc.
Copyright (C) 1980 The Regents of the University of California.
Copyright (C) 1976 Board of Trustees of the University of Illinois.
All rights reserved.
.sp
Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are
duplicated in all such forms and that any documentation,
advertising materials, and other materials related to such
distribution and use acknowledge that the software was developed
by the University of California, Berkeley, the University of Illinois,
Urbana, and Sun Microsystems, Inc
The name of either University
or Sun Microsystems may not be used to endorse or promote products
derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
PURPOSE.
.NE
.PP
.SH Option Summary
Here is a list of all the options for \fBindent\fR, alphabetized by short
option
It is followed by a cross key alphabetized by long option.
.PP
\fB\-bacc\fR
.br
\fB\-\-blank\-lines\-after\-ifdefs\fR
.RS 5
Force blank lines after (and before) ifdefs.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-bad\fR
.br
\fB\-\-blank\-lines\-after\-declarations\fR
.RS 5
Force blank lines after the declarations.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-bap\fR
.br
\fB\-\-blank\-lines\-after\-procedures\fR
.RS 5
Force blank lines after procedure bodies.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-bbb\fR
.br
\fB\-\-blank\-lines\-after\-block\-comments\fR
.RS 5
Force blank lines after block comments.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-bc\fR
.br
\fB\-\-blank\-lines\-after\-commas\fR
.RS 5
Force newline after comma in declaration.
(see \fBDeclarations\fR).
.RE
.PP
\fB\-bl\fR
.br
\fB\-\-braces\-after\-if\-line\fR
.RS 5
Put braces on line after \fBif\fR, etc.
(see \fBStatements\fR).
.RE
.PP
\fB\-bliN\fR
.br
\fB\-\-brace\-indentN\fR
.RS 5
Indent braces N spaces.
(see \fBStatements\fR).
.RE
.PP
\fB\-br\fR
.br
\fB\-\-braces\-on\-if\-line\fR
.RS 5
Put braces on line with \fBif\fR, etc
and structure declarations
(see \fBStatements\fR).
.RE
.PP
\fB\-bs\fR
.br
\fB\-\-Bill\-Shannon\fR
.br
\fB\-\-blank\-before\-sizeof\fR
.RS 5
Put a space between \fBsizeof\fR and its argument.
(see \fBStatements\fR).
.RE
.PP
\fB\-cN\fR
.br
\fB\-\-comment\-indentationN\fR
.RS 5
Put comments to the right of code in column N.
(see \fBComments\fR).
.RE
.PP
\fB\-cdN\fR
.br
\fB\-\-declaration\-comment\-columnN\fR
.RS 5
Put comments to the right of the declarations in column N.
(see \fBComments\fR).
.RE
.PP
\fB\-cdb\fR
.br
\fB\-\-comment\-delimiters\-on\-blank\-lines\fR
.RS 5
Put comment delimiters on blank lines.
(see \fBComments\fR).
.RE
.PP
\fB\-ce\fR
.br
\fB\-\-cuddle\-else\fR
.RS 5
Cuddle else and preceeding \fB}\fR.
(see \fBComments\fR).
.RE
.PP
\fB\-ciN\fR
.br
\fB\-\-continuation\-indentationN\fR
.RS 5
Continuation indent of N spaces.
(see \fBStatements\fR).
.RE
.PP
\fB\-cliN\fR
.br
\fB\-\-case\-indentationN\fR
.RS 5
Case label indent of N spaces.
(see \fBStatements\fR).
.RE
.PP
\fB\-cpN\fR
.br
\fB\-\-else\-endif\-columnN\fR
.RS 5
Put comments to the right of \fB#else\fR and \fB#endif\fR statements in
column N.
(see \fBComments\fR).
.RE
.PP
\fB\-cs\fR
.br
\fB\-\-space\-after\-cast\fR
.RS 5
Put a space after a cast operator.
(see \fBStatements\fR).
.RE
.PP
\fB\-DN\fR
.br
\fB\-\-debugN\fR
.RS 5
Enable debugging traces.
(see \fBMiscellaneous options\fR).
.RE
.PP
\fB\-dN\fR
.br
\fB\-\-line\-comments\-indentationN\fR
.RS 5
Set indentation of comments not to the right of code to N spaces.
(see \fBComments\fR).
.RE
.PP
\fB\-diN\fR
.br
\fB\-\-declaration\-indentationN\fR
.RS 5
Put variables in column N.
(see \fBDeclarations\fR).
.RE
.PP
\fB\-eei\fR
.br
\fB\-\-extra\-expression\-indentation\fR
.RS 5
Indent continuation lines of \fBif\fR, \fBfor\fR and \fBwhile\fR statements.
(see \fBIndentation\fR).
.RE
.PP
\fB\-fc1\fR
.br
\fB\-\-format\-first\-column\-comments\fR
.RS 5
Format comments in the first column.
(see \fBComments\fR).
.RE
.PP
\fB\-fca\fR
.br
\fB\-\-format\-all\-comments\fR
.RS 5
Do not disable all formatting of comments.
(see \fBComments\fR).
.RE
.PP
\fB\-gnu\fR
.br
\fB\-\-gnu\-style\fR
.RS 5
Use GNU coding style
This is the default.
(see \fBCommon styles\fR).
.RE
.PP
\fB\-iN\fR
.br
\fB\-\-indent\-levelN\fR
.br
\fB\-\-indentation\-levelN\fR
.RS 5
Set indentation level to N spaces.
(see \fBIndentation\fR).
.RE
.PP
\fB\-ipN\fR
.br
\fB\-\-parameter\-indentationN\fR
.RS 5
Indent parameter types in old\-style function definitions by N
spaces.
(see \fBIndentation\fR).
.RE
.PP
\fB\-kr\fR
.br
\fB\-\-k\-and\-r\-style\fR
.br
\fB\-\-kernighan\-and\-ritchie\fR
.br
\fB\-\-kernighan\-and\-ritchie\-style\fR
.RS 5
Use Kernighan & Ritchie coding style.
(see \fBCommon styles\fR).
.RE
.PP
\fB\-lN\fR
.br
\fB\-\-line\-lengthN\fR
.RS 5
Set maximum line length for non\-comment lines to N.
(see \fBComments\fR).
.RE
.PP
\fB\-lcN\fR
.br
\fB\-\-comment\-line\-lengthN\fR
.RS 5
Set maximum line length for comment formatting to N.
(see \fBComments\fR).
.RE
.PP
\fB\-lp\fR
.br
\fB\-\-continue\-at\-parentheses\fR
.RS 5
Line up continued lines at parentheses.
(see \fBIndentation\fR).
.RE
.PP
\fB\-lps\fR
.br
\fB\-\-leave\-preprocessor\-space\fR
.RS 5
Leave space between \fB#\fR and preprocessor directive.
(see \fBIndentation\fR).
.RE
.PP
\fB\-nbacc\fR
.br
\fB\-\-no\-blank\-lines\-after\-ifdefs\fR
.RS 5
Do not force blank lines after (and before) ifdefs.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-nbad\fR
.br
\fB\-\-no\-blank\-lines\-after\-declarations\fR
.RS 5
Do not force blank lines after declarations.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-nbap\fR
.br
\fB\-\-no\-blank\-lines\-after\-procedures\fR
.RS 5
Do not force blank lines after procedure bodies.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-nbbb\fR
.br
\fB\-\-no\-blank\-lines\-after\-block\-comments\fR
.RS 5
Do not force blank\-lines after (before) block comments.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-nbc\fR
.br
\fB\-\-no\-blank\-lines\-after\-commas\fR
.RS 5
Do not force newlines after commas in declarations.
(see \fBDeclarations\fR).
.RE
.PP
\fB\-ncdb\fR
.br
\fB\-\-no\-comment\-delimiters\-on\-blank\-lines\fR
.RS 5
Do not put comment delimiters on blank lines.
(see \fBComments\fR).
.RE
.PP
\fB\-nce\fR
.br
\fB\-\-dont\-cuddle\-else\fR
.RS 5
Do not cuddle \fB}\fR and \fBelse\fR.
(see \fBStatements\fR).
.RE
.PP
\fB\-ncs\fR
.br
\fB\-\-no\-space\-after\-casts\fR
.RS 5
Do not put a space after cast operators.
(see \fBStatements\fR).
.RE
.PP
\fB\-neei\fR
.br
\fB\-\-no\-extra\-expression\-indentation\fR
.RS 5
Do not indent continuation lines of \fBif\fR, \fBfor\fR and \fBwhile\fR
statements.
(see \fBIndentation\fR).
.RE
.PP
\fB\-nfc1\fR
.br
\fB\-\-dont\-format\-first\-column\-comments\fR
.RS 5
Do not format comments in the first column as normal.
(see \fBComments\fR).
.RE
.PP
\fB\-nfca\fR
.br
\fB\-\-dont\-format\-comments\fR
.RS 5
Do not format any comments.
(see \fBComments\fR).
.RE
.PP
\fB\-nip\fR
.br
\fB\-\-no\-parameter\-indentation\fR
.RS 5
Zero width indentation for parameters.
(see \fBIndentation\fR).
.RE
.PP
\fB\-nlp\fR
.br
\fB\-\-dont\-line\-up\-parentheses\fR
.RS 5
Do not line up parentheses.
(see \fBStatements\fR).
.RE
.PP
\fB\-nlps\fR
.br
\fB\-\-remove\-preprocessor\-space\fR
.RS 5
Remove space between \fB#\fR and preprocessor directive.
(see \fBIndentation\fR).
.RE
.PP
\fB\-npcs\fR
.br
\fB\-\-no\-space\-after\-function\-call\-names\fR
.RS 5
Do not put space after the function in function calls.
(see \fBStatements\fR).
.RE
.PP
\fB\-npsl\fR
.br
\fB\-\-dont\-break\-procedure\-type\fR
.RS 5
Put the type of a procedure on the same line as its name.
(see \fBDeclarations\fR).
.RE
.PP
\fB\-nsc\fR
.br
\fB\-\-dont\-star\-comments\fR
.RS 5
Do not put the \fB*\fR character at the left of comments.
(see \fBComments\fR).
.RE
.PP
\fB\-nsob\fR
.br
\fB\-\-leave\-optional\-blank\-lines\fR
.RS 5
Do not swallow optional blank lines.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-nss\fR
.br
\fB\-\-dont\-space\-special\-semicolon\fR
.RS 5
Do not force a space before the semicolon after certain statements.
Disables \fB\-ss\fR.
(see \fBStatements\fR).
.RE
.PP
\fB\-nv\fR
.br
\fB\-\-no\-verbosity\fR
.RS 5
Disable verbose mode
(see \fBMiscellaneous options\fR).
.RE
.PP
\fB\-orig\fR
.br
\fB\-\-original\fR
.br
\fB\-\-original\-style\fR
.br
\fB\-\-berkeley\fR
.br
\fB\-\-berkeley\-style\fR
.RS 5
Use the original Berkeley coding style.
(see \fBCommon styles\fR).
.RE
.PP
\fB\-npro\fR
.br
\fB\-\-ignore\-profile\fR
.br
\fB+ignore\-profile\fR
.RS 5
Do not read \fB.indent.pro\fR files.
(see \fBInvoking indent\fR).
.RE
.PP
\fB\-o\fR
.br
\fB\-\-output\fR
.br
\fB\-\-output\-file\fR
.RS 5
Write an output file, for the case where only one input is given.
(see \fBInvoking indent\fR).
.RE
.PP
\fB\-pcs\fR
.br
\fB\-\-space\-after\-procedure\-calls\fR
.RS 5
Insert a space between the name of the procedure being called and
the \fB(\fR.
(see \fBStatements\fR).
.RE
.PP
\fB\-ppiN\fR
.br
\fB\-\-preprocessor\-indentationN\fR
.RS 5
Insert spacing between \fB#\fR and preprocessor keywords
This
overrides \fB\-lps\fR.
(see \fBIndentation\fR).
.RE
.PP
\fB\-psl\fR
.br
\fB\-\-procnames\-start\-lines\fR
.RS 5
Put the type of a procedure on the line before its name.
(see \fBDeclarations\fR).
.RE
.PP
\fB\-sc\fR
.br
\fB\-\-start\-left\-side\-of\-comments\fR
.RS 5
Put the \fB*\fR character at the left of comments.
(see \fBComments\fR).
.RE
.PP
\fB\-sob\fR
.br
\fB\-\-swallow\-optional\-blank\-lines\fR
.RS 5
Swallow optional blank lines.
(see \fBBlank lines\fR).
.RE
.PP
\fB\-ss\fR
.br
\fB\-\-space\-special\-semicolon\fR
.RS 5
On one\-line \fBfor\fR and \fBwhile\fR statments, force a blank before the
semicolon.
(see \fBStatements\fR).
.RE
.PP
\fB\-st\fR
.br
\fB\-\-standard\-output\fR
.RS 5
Write to standard output.
(see \fBInvoking indent\fR).
.RE
.PP
\fB\-T\fR
.RS 5
Tell \fBindent\fR the name of typenames.
(see \fBDeclarations\fR).
.RE
.PP
\fB\-ta\fR
.br
\fB\-auto\-typedefs\fR
.RS 5
Tell \fBindent\fR to assume names ending with "_t" are typenames.
(see \fBDeclarations\fR).
.RE
.PP
\fB\-tsN\fR
.br
\fB\-\-tab\-sizeN\fR
.RS 5
Set tab size to N spaces.
(see \fBIndentation\fR).
.RE
.PP
\fB\-v\fR
.br
\fB\-\-verbose\fR
.RS 5
Enable verbose mode.
(see \fBMiscellaneous options\fR).
.RE
.PP
\fB\-version\fR
.RS 5
Output the version number of \fBindent\fR.
(see \fBMiscellaneous options\fR).
.RE
.SS Options' Cross Key
Here is a list of options alphabetized by long option, to help you find
the corresponding short option.
.NS
\-\-auto\-typedefs                                 \-ta
\-\-blank\-lines\-after\-block\-comments              \-bbb
\-\-blank\-lines\-after\-commas                      \-bc
\-\-blank\-lines\-after\-declarations                \-bad
\-\-blank\-lines\-after\-procedures                  \-bap
\-\-braces\-after\-if\-line                          \-bl
\-\-brace\-indent                                  \-bli
\-\-braces\-on\-if\-line                             \-br
\-\-case\-indentation                              \-cliN
\-\-comment\-delimiters\-on\-blank\-lines             \-cdb
\-\-comment\-indentation                           \-cN
\-\-continuation\-indentation                      \-ciN
\-\-continue\-at\-parentheses                       \-lp
\-\-cuddle\-else                                   \-ce
\-\-debug                                         \-DN
\-\-declaration\-comment\-column                    \-cdN
\-\-declaration\-indentation                       \-diN
\-\-dont\-break\-procedure\-type                     \-npsl
\-\-dont\-cuddle\-else                              \-nce
\-\-dont\-format\-comments                          \-nfca
\-\-dont\-format\-first\-column\-comments             \-nfc1
\-\-dont\-line\-up\-parentheses                      \-nlp
\-\-dont\-space\-special\-semicolon                  \-nss
\-\-dont\-star\-comments                            \-nsc
\-\-else\-endif\-column                             \-cpN
\-\-format\-all\-comments                           \-fca
\-\-format\-first\-column\-comments                  \-fc1
\-\-gnu\-style                                     \-gnu
\-\-ignore\-profile                                \-npro
\-\-indent\-level                                  \-iN
\-\-k\-and\-r\-style                                 \-kr
\-\-leave\-optional\-blank\-lines                    \-nsob
\-\-leave\-preprocessor\-space                      \-lps
\-\-line\-comments\-indentation                     \-dN
\-\-line\-length                                   \-lN
\-\-no\-blank\-lines\-after\-block\-comments           \-nbbb
\-\-no\-blank\-lines\-after\-commas                   \-nbc
\-\-no\-blank\-lines\-after\-declarations             \-nbad
\-\-no\-blank\-lines\-after\-procedures               \-nbap
\-\-no\-comment\-delimiters\-on\-blank\-lines          \-ncdb
\-\-no\-space\-after\-casts                          \-ncs
\-\-no\-parameter\-indentation                      \-nip
\-\-no\-space\-after\-function\-call\-names            \-npcs
\-\-no\-verbosity                                  \-nv
\-\-original                                      \-orig
\-\-parameter\-indentation                         \-ipN
\-\-preprocessor\-indentation                      \-ppiN
\-\-procnames\-start\-lines                         \-psl
\-\-space\-after\-cast                              \-cs
\-\-space\-after\-procedure\-calls                   \-pcs
\-\-space\-special\-semicolon                       \-ss
\-\-standard\-output                               \-st
\-\-start\-left\-side\-of\-comments                   \-sc
\-\-swallow\-optional\-blank\-lines                  \-sob
\-\-tab\-size                                      \-tsN
\-\-verbose                                       \-v
.NE
.PP
.SH Index
.TS
l l
l l .
Menu:
+ignore\-profile	Invoking indent.
\-\-berkeley	Common styles.
\-\-berkeley\-style	Common styles.
\-\-Bill\-Shannon	Statements.
\-\-blank\-before\-sizeof	Statements.
\-\-blank\-lines\-after\-block\-comments	Blank lines.
\-\-blank\-lines\-after\-commas	Declarations.
\-\-blank\-lines\-after\-declarations	\-bad.
\-\-blank\-lines\-after\-ifdefs	Blank lines.
\-\-blank\-lines\-after\-procedures	\-bap.
\-\-brace\-indentN	Statements.
\-\-braces\-after\-if\-line	Statements.
\-\-braces\-on\-if\-line	Statements.
\-\-c\-plus\-plus	Other Languages.
\-\-case\-indentationN	Statements.
\-\-comment\-delimiters\-on\-blank\-lines	Comments.
\-\-comment\-indentationN	Comments.
\-\-continuation\-indentationN	Indentation.
\-\-continue\-at\-parentheses	Indentation.
\-\-cuddle\-else	Statements.
\-\-debug	Miscellaneous options.
\-\-declaration\-comment\-columnN	Comments.
\-\-declaration\-indentationN	Declarations.
\-\-dont\-break\-procedure\-type	Declarations.
\-\-dont\-cuddle\-else	Statements.
\-\-dont\-format\-comments	Comments.
\-\-dont\-format\-first\-column\-comments	Comments.
\-\-dont\-line\-up\-parentheses	Indentation.
\-\-dont\-space\-special\-semicolon	Statements.
\-\-dont\-star\-comments	Comments.
\-\-else\-endif\-columnN	Comments.
\-\-extra\-expression\-indentation	Indentation.
\-\-format\-all\-comments	Comments.
\-\-format\-first\-column\-comments	Comments.
\-\-gnu\-style	Common styles.
\-\-help	Miscellaneous options.
\-\-ignore\-profile	Invoking indent.
\-\-indent\-levelN	Indentation.
\-\-indentation\-levelN	Indentation.
\-\-k\-and\-r\-style	Common styles.
\-\-kernighan\-and\-ritchie	Common styles.
\-\-kernighan\-and\-ritchie\-style	Common styles.
\-\-leave\-optional\-blank\-lines	Blank lines.
\-\-leave\-preprocessor\-space	Indentation.
\-\-lex\-or\-yacc	Other Languages.
\-\-line\-comments\-indentationN	Comments.
\-\-no\-blank\-lines\-after\-block\-comments	Blank lines.
\-\-no\-blank\-lines\-after\-commas	Declarations.
\-\-no\-blank\-lines\-after\-declarations	\-bad.
\-\-no\-blank\-lines\-after\-ifdefs	Blank lines.
\-\-no\-blank\-lines\-after\-procedures	\-bap.
\-\-no\-comment\-delimiters\-on\-blank\-lines	Comments.
\-\-no\-extra\-expression\-indentation	Indentation.
\-\-no\-parameter\-indentation	Indentation.
\-\-no\-space\-after\-casts	Statements.
\-\-no\-space\-after\-function\-call\-names	Statements.
\-\-no\-verbosity	Miscellaneous options.
\-\-original	Common styles.
\-\-original\-style	Common styles.
\-\-output	Invoking indent.
\-\-output\-file	Invoking indent.
\-\-parameter\-indentationN	Indentation.
\-\-preprocessor\-indentationN	Indentation.
\-\-procnames\-start\-lines	Declarations.
\-\-remove\-preprocessor\-space	Indentation.
\-\-space\-after\-cast	Statements.
\-\-space\-after\-procedure\-calls	Statements.
\-\-space\-special\-semicolon	Statements.
\-\-standard\-output	Invoking indent.
\-\-start\-left\-side\-of\-comments	Comments.
\-\-swallow\-optional\-blank\-lines	Blank lines.
\-\-tab\-sizeN	Indentation.
\-\-usage	Miscellaneous options.
\-\-verbose	Miscellaneous options.
\-\-version	Miscellaneous options.
\-auto\-typedefs	Declarations.
\-bacc	Blank lines.
\-bad	\-bad.
\-bap	\-bap.
\-bbb	Blank lines.
\-bc	Declarations.
\-bl	Statements.
\-bliN	Statements.
\-br	Statements.
\-bs	Statements.
\-c++	Other Languages.
\-cdb	Comments.
\-cdN	Comments.
\-ce	Statements.
\-ciN	Indentation.
\-cliN	Statements.
\-cN	Comments.
\-cpN	Comments.
\-cs	Statements.
\-D	Miscellaneous options.
\-diN	Declarations.
\-dN	Comments.
\-eei	Indentation.
\-fc1	Comments.
\-fca	Comments.
\-gnu	Common styles.
\-h	Miscellaneous options.
\-iN	Indentation.
\-ipN	Indentation.
\-kr	Common styles.
\-lp	Indentation.
\-lps	Indentation.
\-ly	Other Languages.
\-nbacc	Blank lines.
\-nbad	\-bad.
\-nbap	\-bap.
\-nbbb	Blank lines.
\-nbc	Declarations.
\-ncdb	Comments.
\-nce	Statements.
\-ncs	Statements.
\-neei	Indentation.
\-nfc1	Comments.
\-nfca	Comments.
\-nip	Indentation.
\-nlp	Indentation.
\-nlps	Indentation.
\-npcs	Statements.
\-npro	Invoking indent.
\-npsl	Declarations.
\-nsc	Comments.
\-nsob	Blank lines.
\-nss	Statements.
\-nv	Miscellaneous options.
\-o	Invoking indent.
\-orig	Common styles.
\-pcs	Statements.
\-ppiN	Indentation.
\-psl	Declarations.
\-sc	Comments.
\-sob	Blank lines.
\-ss	Statements.
\-st	Invoking indent.
\-T	Declarations.
\-ta	Declarations.
\-tsN	Indentation.
\-v	Miscellaneous options.
\.indent.pro file	Invoking indent.
Beginning indent	Invoking indent.
Berkeley style	Common styles.
Blank lines	Blank lines.
Comments	Comments.
etags requires \-psl	Declarations.
GNU style	Common styles.
Initialization file	Invoking indent.
Invoking indent	Invoking indent.
Kernighan & Ritchie style	Common styles.
Long options, use of	Invoking indent.
Original Berkeley style	Common styles.
Output File Specification	Invoking indent.
Standard Output	Invoking indent.
Starting indent	Invoking indent.
Typenames	Declarations.
Using Standard Input	Invoking indent.
.TE
