'\" t
.TH FOOBAR
.de NS
.sp
.in +4
.nf
.ft C
..
.de NE
.fi
.ft P
.br
.in -4
..
.SH Summary
foobar - foo bar
.PP
This is Info file indent.info, produced by Makeinfo version 1.68 from
the input file ./indent.texinfo.
.PP
Copyright (C) 1989, 1992, 1993, 1994, 1995, 1996 Free Software
Foundation, Inc.  Copyright (C) 1995, 1996 Joseph Arceneaux
.PP
This is Edition 2.0, January, 1996, of `The `indent' Manual', for
Indent Version 2.0
.PP
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
.SH `indent':  Indent and Format C Program Source
.PP
The `indent' program changes the appearance of a C program by
inserting or deleting whitespace.
.PP
This is Edition 2.0, January 1996, of `The `indent' Manual', for
Indent Version 2.0
.TS
l l
l l .
Menu:
Indent Program	see \fBThe `indent' Program\fR
Option Summary	see \fBOption Summary\fR
Index	see \fBIndex\fR
.TE
.SH The `indent' Program
.PP
The `indent' program can be used to make code easier to read.  It
can also convert from one style of writing C to another.
.PP
`indent' understands a substantial amount about the syntax of C, but
it also attempts to cope with incomplete and misformed syntax.
.PP
In version 1.2 and more recent versions, the GNU style of indenting
is the default.
.TS
l l
l l .
Menu:
Invoking indent	see \fBInvoking `indent'\fR
Backup files	see \fBBackup Files\fR
Common styles	see \fBCommon styles\fR
Blank lines	see \fBBlank lines\fR
Comments	see \fBComments\fR
Statements	see \fBStatements\fR
Declarations	see \fBDeclarations\fR
Indentation	see \fBIndentation\fR
Disabling Formatting	see \fBDisabling Formatting\fR
Miscellaneous options	see \fBMiscellaneous options\fR
Bugs	see \fBBugs\fR
Copyright	see \fBCopyright\fR
.TE
.SH Invoking `indent'
.PP
As of version 1.3, the format of the `indent' command is:
.NS
indent [OPTIONS] [INPUT-FILES]
.sp
indent [OPTIONS] [SINGLE-INPUT-FILE] [-o OUTPUT-FILE]
.NE
.PP
This format is different from earlier versions and other versions of
`indent'.
.PP
In the first form, one or more input files are specified.  `indent'
makes a backup copy of each file, and the original file is replaced with
its indented version.  *Note Backup files::, for an explanation of how
backups are made.
.PP
In the second form, only one input file is specified.  In this case,
or when the standard input is used, you may specify an output file after
the `-o' option.
.PP
To cause `indent' to write to standard output, use the `-st' option.
This is only allowed when there is only one input file, or when the
standard input is used.
.PP
If no input files are named, the standard input is read for input.
Also, if a filename named `-' is specified, then the standard input is
read.
.PP
As an example, each of the following commands will input the program
`slithy_toves.c' and write its indented text to `slithy_toves.out':
.NS
indent slithy_toves.c -o slithy_toves.out
.sp
indent -st slithy_toves.c > slithy_toves.out
.sp
cat slithy_toves.c | indent -o slithy_toves.out
.NE
.PP
Most other options to `indent' control how programs are formatted.
As of version 1.2, `indent' also recognizes a long name for each option
name.  Long options are prefixed by either `--' or `+'.(1) In most of
this document, the traditional, short names are used for the sake of
brevity.  *Note Option Summary::, for a list of options, including both
long and short names.
.PP
Here is another example:
.NS
indent -br test/metabolism.c -l85
.NE
.PP
This will indent the program `test/metabolism.c' using the `-br' and
`-l85' options, write the output back to `test/metabolism.c', and write
the original contents of `test/metabolism.c' to a backup file in the
directory `test'.
.PP
Equivalent invocations using long option names for this example would
be:
.NS
indent --braces-on-if-line --line-length185 test/metabolism.c
.sp
indent +braces-on-if-line +line-length185 test/metabolism.c
.NE
.PP
If you find that you often use `indent' with the same options, you
may put those options into a file named `.indent.pro'.  `indent' will
first look for `.indent.pro' in the current directory and use that if
found.  Otherwise, `indent' will search your home directory for
`.indent.pro' and use that file if it is found.  This behaviour is
different from that of other versions of `indent', which load both
files if they both exist.
.PP
The format of `.indent.pro' is simply a list of options, just as
they would appear on the command line, separated by white space (tabs,
spaces, and newlines).  Options in `.indent.pro' may be surrounded by C
or C++ comments, in which case they are ignored.
.PP
Command line switches are handled *after* processing `.indent.pro'.
Options specified later override arguments specified earlier, with one
exception: Explicitly specified options always override background
options (*note Common styles::.).  You can prevent `indent' from
reading an `.indent.pro' file by specifying the `-npro' option.
.PP
---------- Footnotes ----------
.PP
(1)  `+' is being superseded by `--' to maintain consistency with
the POSIX standard.
.SH Backup Files
.PP
As of version 1.3, GNU `indent' makes GNU-style backup files, the
same way GNU Emacs does.  This means that either "simple" or "numbered"
backup filenames may be made.
.PP
Simple backup file names are generated by appending a suffix to the
original file name.  The default for the this suffix is the
one-character string `~' (tilde).  Thus, the backup file for `python.c'
would be `python.c~'.
.PP
Instead of the default, you may specify any string as a suffix by
setting the environment variable `SIMPLE_BACKUP_SUFFIX' to your
preferred suffix.
.PP
Numbered backup versions of a file `momewraths' look like
`momewraths.c.~23~', where 23 is the version of this particular backup.
When making a numbered backup of the file `src/momewrath.c', the
backup file will be named `src/momewrath.c.~V~', where V is one greater
than the highest version currently existing in the directory `src'.
.PP
The type of backup file made is controlled by the value of the
environment variable `VERSION_CONTROL'.  If it is the string `simple',
then only simple backups will be made.  If its value is the string
`numbered', then numbered backups will be made.  If its value is
`numbered-existing', then numbered backups will be made if there
*already exist* numbered backups for the file being indented;
otherwise, a simple backup is made.  If `VERSION_CONTROL' is not set,
then `indent' assumes the behaviour of `numbered-existing'.
.PP
Other versions of `indent' use the suffix `.BAK' in naming backup
files.  This behaviour can be emulated by setting
`SIMPLE_BACKUP_SUFFIX' to `.BAK'.
.PP
Note also that other versions of `indent' make backups in the
current directory, rather than in the directory of the source file as
GNU `indent' now does.
.SH Common styles
.PP
There are several common styles of C code, including the GNU style,
the Kernighan & Ritchie style, and the original Berkeley style.  A
style may be selected with a single "background" option, which
specifies a set of values for all other options.  However, explicitly
specified options always override options implied by a background
option.
.PP
As of version 1.2, the default style of GNU `indent' is the GNU
style.  Thus, it is no longer neccessary to specify the option `-gnu'
to obtain this format, although doing so will not cause an error.
Option settings which correspond to the GNU style are:
.NS
-nbad -bap -nbc -bl -ncdb -cs -nce -di2 -ndj
-ei -nfc1 -i2 -ip5 -lp -pcs -npsl -psl -nsc -nsob -bli2
-cp1 -nfca
.NE
.PP
The GNU coding style is that preferred by the GNU project.  It is the
style that the GNU Emacs C mode encourages and which is used in the C
portions of GNU Emacs.  (People interested in writing programs for
Project GNU should get a copy of `The GNU Coding Standards', which also
covers semantic and portability issues such as memory usage, the size
of integers, etc.)
.PP
The Kernighan & Ritchie style is used throughout their well-known
book `The C Programming Language'.  It is enabled with the `-kr'
option.  The Kernighan & Ritchie style corresponds to the following set
of options:
.NS
-nbad -bap -nbc -br -c33 -cd33 -ncdb -ce -ci4
-cli0 -cp33 -d0 -di1 -nfc1 -nfca -i4 -ip0 -l75 -lp
-npcs -npsl -nsc -nsob -nss -cs
.NE
.PP
Kernighan & Ritchie style does not put comments to the right of code in
the same column at all times (nor does it use only one space to the
right of the code), so for this style `indent' has arbitrarily chosen
column 33.
.PP
The style of the original Berkeley `indent' may be obtained by
specifying `-orig' (or by specifyfying `--original', using the long
option name).  This style is equivalent to the following settings:
.NS
-nbap -nbad -bc -br -c33 -cd33 -cdb -ce -ci4
-cli0 -cp33 -di16 -fc1 -fca -i4 -ip4 -l75 -lp
-npcs -psl -sc -nsob -nss -ts8
.NE
.PP
.SH Blank lines
.PP
Various programming styles use blank lines in different places.
`indent' has a number of options to insert or delete blank lines in
specific places.
.PP
The `-bad' option causes `indent' to force a blank line after every
block of declarations.  The `-nbad' option causes `indent' not to force
such blank lines.
.PP
The `-bap' option forces a blank line after every procedure body.
The `-nbap' option forces no such blank line.
.PP
The `-bbb' option forces a blank line before every boxed comment.
(*Note Comments::) The `-nbbb' option does not force such blank lines.
.PP
The `-sob' option causes `indent' to swallow optional blank lines
(that is, any optional blank lines present in the input will be removed
from the output).  If the `-nsob' is specified, any blank lines present
in the input file will be copied to the output file.
.TS
l l
l l .
Menu:
-bad	see \fBMore on the `-bad' option.\fR
-bap	see \fBMore on the `-bap' option.\fR
.TE
.SS -blank-lines-after-declarations
.PP
The `-bad' option forces a blank line after every block of
declarations.  The `-nbad' option does not add any such blank lines.
.PP
For example, given the input
.NS
char *foo;
char *bar;
/* This separates blocks of declarations.  */
int baz;
.NE
.PP
`indent -bad' produces
.NS
char *foo;
char *bar;
.sp
/* This separates blocks of declarations.  */
int baz;
.NE
.PP
and `indent -nbad' produces
.NS
char *foo;
char *bar;
/* This separates blocks of declarations.  */
int baz;
.NE
.PP
.SS -blank-lines-after-procedures
.PP
The `-bap' option forces a blank line after every procedure body.
.PP
For example, given the input
.NS
int
foo ()
{
  puts("Hi");
}
/* The procedure bar is even less interesting.  */
char *
bar ()
{
  puts("Hello");
}
.NE
.PP
`indent -bap' produces
.NS
int
foo ()
{
  puts ("Hi");
}
.sp
/* The procedure bar is even less interesting.  */
char *
bar ()
{
  puts ("Hello");
}
.NE
.PP
and `indent -nbap' produces
.NS
int
foo ()
{
  puts ("Hi");
}
/* The procedure bar is even less interesting.  */
char *
bar ()
{
  puts ("Hello");
}
.NE
.PP
No blank line will be added after the procedure `foo'.
.SH Comments
.PP
`indent' formats both C and C++ comments. C comments are begun with
`/*', terminated with `*/' and may contain newline characters.  C++
comments begin with the delimiter `//' and end at the newline.
.PP
`indent' handles comments differently depending upon their context.
`indent' attempts to distinguish amongst comments which follow
statements, comments which follow declarations, comments following
preprocessor directives, and comments which are not preceded by code of
any sort, i.e., they begin the text of the line (although not
neccessarily in column 1).
.PP
`indent' further distinguishes between comments found outside of
procecures and aggregates, and those found within them.  In particular,
comments beginning a line found within a procedure will be indented to
the column at which code is currently indented.  The exception to this a
comment beginning in the leftmost column;  such a comment is output at
that column.
.PP
`indent' attempts to leave "boxed comments" unmodified.  The general
idea of such a comment is that it is enclosed in a rectangle or "box"
of stars or dashes to visually set it apart.  More precisely, boxed
comments are defined as those in which the initial `/*' is followed
immediately by the character `*', `=', `_', or `-', or those in which
the beginning comment delimiter (`/*') is on a line by itself, and the
following line begins with a `*' in the same column as the star of the
opening delimiter.
.PP
Examples of boxed comments are:
.NS
/**********************
 * Comment in a box!! *
 **********************/
.sp
       /*
        * A different kind of scent,
        * for a different kind of comment.
        */
.NE
.PP
`indent' attempts to leave boxed comments exactly as they are found
in the source file.  Thus the indentation of the comment is unchanged,
and its length is not checked in any way.  The only alteration made is
that an embedded tab character may be converted into the appropriate
number of spaces.
.PP
If the `-bbb' option is specified, all such boxed comments will be
preceded by a blank line, unless such a comment is preceded by code.
.PP
Comments which are not boxed comments may be formatted, which means
that the line is broken to fit within a right margin and left-filled
with whitespace.  Single newlines are equivalent to a space, but blank
lines (two or more newlines in a row) are taken to mean a paragraph
break.  Formatting of comments which begin after the first column is
enabled with the `-fca' option.  To format those beginning in column
one, specify `-fc1'.  Such formatting is disabled by default.
.PP
The right margin for formatting defaults to 78, but may be changed
with the `-lc' option.  If the margin specified does not allow the
comment to be printed, the margin will be automatically extended for the
duration of that comment.  The margin is not respected if the comment is
not being formatted.
.PP
If the comment begins a line (i.e., there is no program text to its
left), it will be indented to the column it was found in unless the
comment is within a block of code.  In that case, such a comment will be
aligned with the indented code of that block (unless the comment began
in the first column).  This alignment may be affected by the `-d'
option, which specifies an amount by which such comments are moved to
the *left*, or unindented.  For example, `-d2' places comments two
spaces to the left of code.  By default, comments are aligned with
code, unless they begin in the first column, in which case they are left
there by default - to get them aligned with the code, specify `-fc1'.
.PP
Comments to the right of code will appear by default in column 33.
This may be changed with one of three options.  `-c' will specify the
column for comments following code, `-cd' specifies the column for
comments following declarations, and `-cp' specifies the column for
comments following preprocessor directives `#else' and `#endif'.
.PP
If the code to the left of the comment exceeds the beginning column,
the comment column will be extended to the next tabstop column past the
end of the code, or in the case of preprocessor directives, to one
space past the end of the directive.  This extension lasts only for the
output of that particular comment.
.PP
The `-cdb' option places the comment delimiters on blank lines.
Thus, a single line comment like `/* Claustrophobia */' can be
transformed into:
.NS
/*
   Claustrophobia
 */
.NE
.PP
Stars can be placed at the beginning of multi-line comments with the
`-sc' option.  Thus, the single-line comment above can be transformed
(with `-cdb -sc') into:
.NS
/*
 * Claustrophobia
 */
.NE
.PP
.SH Statements
.PP
The `-br' or `-bl' option specifies how to format braces.
.PP
The `-br' option formats statement braces like this:
.NS
if (x > 0) {
  x--;
}
.NE
.PP
The `-bl' option formats them like this:
.NS
if (x > 0)
  {
    x--;
  }
.NE
.PP
These options also affect structure and enumeration declarations.
The `-br' option produces structure declarations like the following:
.NS
struct Sname {
    int i;
    char chp;
} Vname;
.NE
.PP
The default behaviour, also obtained by specifying `-bl', would
yield the following format for the same declaration:
.NS
struct Sname
  {
     int i;
     char chp;
  }
Vname;
.NE
.PP
If you use the `-bl' option, you may also want to specify the `-bli'
option.  This option specifies the number of spaces by which braces are
indented.  `-bli2', the default, gives the result shown above.  `-bli0'
results in the following:
.NS
if (x > 0)
{
  x--;
}
.NE
.PP
If you are using the `-br' option, you probably want to also use the
`-ce' option.  This causes the `else' in an if-then-else construct to
cuddle up to the immediately preceding `}'.  For example, with `-br
-ce' you get the following:
.NS
if (x > 0) {
  x--;
} else {
  fprintf (stderr, "...something wrong?\n");
}
.NE
.PP
With `-br -nce' that code would appear as
.NS
if (x > 0) {
  x--;
}
else {
  fprintf (stderr, "...something wrong?\n");
}
.NE
.PP
The `-cli' option specifies the number of spaces that case labels
should be indented to the right of the containing `switch' statement.
.PP
If a semicolon is on the same line as a `for' or `while' statement,
the `-ss' option will cause a space to be placed before the semicolon.
This emphasizes the semicolon, making it clear that the body of the
`for' or `while' statement is an empty statement.  `-nss' disables this
feature.
.PP
The `-pcs' option causes a space to be placed between the name of
the procedure being called and the `(' (for example, `puts ("Hi");'.
The `-npcs' option would give `puts("Hi");').
.PP
If the `-cs' option is specified, `indent' puts a space after a cast
operator.
.PP
The `-bs' option ensures that there is a space between the keyword
`sizeof' and its argument.  In some versions, this is known as the
`Bill_Shannon' option.
.SH Declarations
.PP
By default `indent' will line up identifiers, in the column
specified by the `-di' option.  For example, `-di16' makes things look
like:
.NS
int             foo;
char           *bar;
.NE
.PP
Using a small value (such as one or two) for the `-di' option can be
used to cause the indentifiers to be placed in the first available
position, for example
.NS
int foo;
char *bar;
.NE
.PP
The value given to the `-di' option will still affect variables
which are put on separate lines from their types, for example `-di2'
will lead to
.NS
int
  foo;
.NE
.PP
If the `-bc' option is specified, a newline is forced after each
comma in a declaration.  For example,
.NS
int a,
  b,
  c;
.NE
.PP
With the `-nbc' option this would look like
.NS
int a, b, c;
.NE
.PP
The `-psl' option causes the type of a procedure being defined to be
placed on the line before the name of the procedure.  This style is
required for the `etags' program to work correctly, as well as some of
the `c-mode' functions of Emacs.
.PP
You must use the `-T' option to tell `indent' the name of all the
typenames in your program that are defined by `typedef'.  `-T' can be
specified more than once, and all names specified are used.  For
example, if your program contains
.NS
typedef unsigned long CODE_ADDR;
typedef enum {red, blue, green} COLOR;
.NE
.PP
you would use the options `-T CODE_ADDR -T COLOR'.
.SH Indentation
.PP
One issue in the formatting of code is how far each line should be
indented from the left margin.  When the beginning of a statement such
as `if' or `for' is encountered, the indentation level is increased by
the value specified by the `-i' option.  For example, use `-i8' to
specify an eight character indentation for each level.  When a
statement is broken across two lines, the second line is indented by a
number of additional spaces specified by the `-ci' option.  `-ci'
defaults to 0.  However, if the `-lp' option is specified, and a line
has a left parenthesis which is not closed on that line, then
continuation lines will be lined up to start at the character position
just after the left parenthesis.  This processing also applies to `['
and applies to `{' when it occurs in initialization lists.  For
example, a piece of continued code might look like this with `-nlp
-ci3' in effect:
.NS
  p1 = first_procedure (second_procedure (p2, p3),
     third_procedure (p4, p5));
.NE
.PP
With `-lp' in effect the code looks somewhat clearer:
.NS
  p1 = first_procedure (second_procedure (p2, p3),
                        third_procedure (p4, p5));
.NE
.PP
`indent' assumes that tabs are placed at regular intervals of both
input and output character streams.  These intervals are by default 8
columns wide, but (as of version 1.2) may be changed by the `-ts'
option.  Tabs are treated as the equivalent number of spaces.
.PP
The indentation of type declarations in old-style function
definitions is controlled by the `-ip' parameter.  This is a numeric
parameter specifying how many spaces to indent type declarations.  For
example, the default `-ip5' makes definitions look like this:
.NS
char *
create_world (x, y, scale)
     int x;
     int y;
     float scale;
{
  . . .
}
.NE
.PP
For compatibility with other versions of indent, the option `-nip'
is provided, which is equivalent to `-ip0'.
.PP
ASCII C allows white space to be placed on preprocessor command lines
between the character `#' and the command name.  By default, `indent'
removes this space, but specifying the `-lps' option directs `indent'
to leave this space unmodified.
.SH Disabling Formatting
.PP
Formatting of C code may be disabled for portions of a program by
embedding special "control comments" in the program.  To turn off
formatting for a section of a program, place the disabling control
comment `/* *INDENT-OFF* */' on a line by itself just before that
section.  Program text scanned after this control comment is output
precisely as input with no modifications until the corresponding
enabling comment is scanned on a line by itself.  The disabling control
comment is `/* *INDENT-ON* */', and any text following the comment on
the line is also output unformatted.  Formatting begins again with the
input line following the enabling control comment.
.PP
More precisely, `indent' does not attempt to verify the closing
delimiter (`*/') for these C comments, and any whitespace on the line
is totally transparent.
.PP
These control comments also function in their C++ formats, namely
`// *INDENT-OFF*' and `// *INDENT-ON*'.
.PP
It should be noted that the internal state of `indent' remains
unchanged over the course of the unformatted section.  Thus, for
example, turning off formatting in the middle of a function and
continuing it after the end of the function may lead to bizarre
results.  It is therefore wise to be somewhat modular in selecting code
to be left unformatted.
.PP
As a historical note, some earlier versions of `indent' produced
error messages beginning with `*INDENT**'.  These versions of `indent'
were written to ignore any input text lines which began with such error
messages.  I have removed this incestuous feature from `GNU indent'.
.SH Miscellaneous options
.PP
To find out what version of `indent' you have, use the command
`indent -version'.  This will report the version number of `indent',
without doing any of the normal processing.
.PP
The `-v' option can be used to turn on verbose mode.  When in
verbose mode, `indent' reports when it splits one line of input into
two more more lines of output, and gives some size statistics at
completion.
.SH Bugs
.PP
The "-troff" option is strongly deprecated, and is not supported.  A
good thing for someone to do is to rewrite `indent' to generate TeX
source as a hardcopy output option, amoung other things.
.SH Copyright
.PP
The following copyright notice applies to the `indent' program.  The
copyright and copying permissions for this manual appear near the
beginning of this document.
.NS
Copyright (c) 1995, 1996 Joseph Arceneaux
Copyright (c) 1989, 1992, 1993, 1994, 1995, 1996 Free Software Foundation
Copyright (c) 1985 Sun Microsystems, Inc.
Copyright (c) 1980 The Regents of the University of California.
Copyright (c) 1976 Board of Trustees of the University of Illinois.
All rights reserved.
.sp
Redistribution and use in source and binary forms are permitted
provided that the above copyright notice and this paragraph are
duplicated in all such forms and that any documentation,
advertising materials, and other materials related to such
distribution and use acknowledge that the software was developed
by the University of California, Berkeley, the University of Illinois,
Urbana, and Sun Microsystems, Inc.  The name of either University
or Sun Microsystems may not be used to endorse or promote products
derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
PURPOSE.
.NE
.PP
.SH Option Summary
.PP
Here is a list of all the options for `indent', alphabetized by
short option.  It is followed by a cross key alphabetized by long
option.
.PP
`-bad'
.br
`--blank-lines-after-declarations'
.RS 0
     Force blank lines after the declarations.
     *Note Blank lines::.
.RE
.PP
`-bap'
.br
`--blank-lines-after-procedures'
.RS 0
     Force blank lines after procedure bodies.
     *Note Blank lines::.
.RE
.PP
`-bbb'
.br
`--blank-lines-after-block-comments'
.RS 0
     Force blank lines after block comments.
     *Note Blank lines::.
.RE
.PP
`-bc'
.br
`--blank-lines-after-commas'
.RS 0
     Force newline after comma in declaration.
     *Note Declarations::.
.RE
.PP
`-bl'
.br
`--braces-after-if-line'
.RS 0
     Put braces on line after `if', etc.
     *Note Statements::.
.RE
`-bliN'
.PP
`--brace-indentN'
.RS 0
     Indent braces N spaces.
     *Note Statements::.
.RE
.PP
`-br'
.br
`--braces-on-if-line'
.RS 0
     Put braces on line with `if', etc. and structure declarations
     *Note Statements::.
.RE
.PP
`-bs'
.br
`--Bill-Shannon'
.br
`--blank-before-sizeof'
.RS 0
     Put a space between `sizeof' and its argument.
     *Note Statements::
.RE
.PP
`-cN'
.br
`--comment-indentationN'
.RS 0
     Put comments to the right of code in column N.
     *Note Comments::.
.RE
.PP
`-cdN'
.br
`--declaration-comment-columnN'
.RS 0
     Put comments to the right of the declarations in column N.
     *Note Comments::.
.RE
.PP
`-cdb'
.br
`--comment-delimiters-on-blank-lines'
.RS 0
     Put comment delimiters on blank lines.
     *Note Comments::.
.RE
.PP
`-ce'
.br
`--cuddle-else'
.RS 0
     Cuddle else and preceeding `}'.
     *Note Comments::.
.RE
.PP
`-ciN'
.br
`--continuation-indentationN'
.RS 0
     Continuation indent of N spaces.
     *Note Statements::.
.RE
.PP
`-cliN'
.br
`--case-indentationN'
.RS 0
     Case label indent of N spaces.
     *Note Statements::.
.RE
`-cpN'
.PP
`--else-endif-columnN'
.RS 0
     Put comments to the right of `#else' and `#endif' statements in
     column N.
     *Note Comments::.
.RE
.PP
`-cs'
.br
`--space-after-cast'
.RS 0
     Put a space after a cast operator.
     *Note Statements::.
.RE
.PP
`-dN'
.br
`--line-comments-indentationN'
.RS 0
     Set indentation of comments not to the right of code to N spaces.
     *Note Comments::.
.RE
.PP
`-diN'
.br
`--declaration-indentationN'
.RS 0
     Put variables in column N.
     *Note Declarations::.
.RE
.PP
`-fc1'
.br
`--format-first-column-comments'
.RS 0
     Format comments in the first column.
     *Note Comments::.
.RE
.PP
`-fca'
.br
`--format-all-comments'
.RS 0
     Do not disable all formatting of comments.
     *Note Comments::
.RE
.PP
`-gnu'
.br
`--gnu-style'
.RS 0
     Use GNU coding style.  This is the default.
     *Note Common styles::.
.RE
.PP
`-iN'
.br
`--indent-levelN'
.RS 0
     Set indentation level to N spaces.
     *Note Indentation::.
.RE
.PP
`-ipN'
.br
`--parameter-indentationN'
.RS 0
     Indent parameter types in old-style function definitions by N
     spaces.
     *Note Indentation::.
.RE
.PP
`-kr'
.br
`--k-and-r-style'
.RS 0
     Use Kernighan & Ritchie coding style.
     *Note Common styles::.
.RE
.PP
`-lN'
.br
`--line-lengthN'
.RS 0
     Set maximum line length for non-comment lines to N.
     *Note Comments::.
.RE
.PP
`-lcN'
.br
`--comment-line-lengthN'
.RS 0
     Set maximum line length for comment formatting to N.
     *Note Comments::.
.RE
.PP
`-lp'
.br
`--continue-at-parentheses'
.RS 0
     Line up continued lines at parentheses.
     *Note Indentation::.
.RE
.PP
`-lps'
.br
`--leave-preprocessor-space'
.RS 0
     Leave space between `#' and preprocessor directive.  *Note
     Indentation::.
.RE
.PP
`-nbad'
.br
`--no-blank-lines-after-declarations'
.RS 0
     Do not force blank lines after declarations.
     *Note Blank lines::.
.RE
.PP
`-nbap'
.br
`--no-blank-lines-after-procedures'
.RS 0
     Do not force blank lines after procedure bodies.
     *Note Blank lines::.
.RE
.PP
`-nbc'
.br
`--no-blank-lines-after-commas'
.RS 0
     Do not force newlines after commas in declarations.
     *Note Declarations::.
.RE
.PP
`-ncdb'
.br
`--no-comment-delimiters-on-blank-lines'
.RS 0
     Do not put comment delimiters on blank lines.
     *Note Comments::.
.RE
.PP
`-nce'
.br
`--dont-cuddle-else'
.RS 0
     Do not cuddle `}' and `else'.
     *Note Statements::.
.RE
.PP
`-ncs'
.br
`--no-space-after-casts'
.RS 0
     Do not put a space after cast operators.
     *Note Statements::.
.RE
.PP
`-nfc1'
.br
`--dont-format-first-column-comments'
.RS 0
     Do not format comments in the first column as normal.
     *Note Comments::.
.RE
.PP
`-nfca'
.br
`--dont-format-comments'
.RS 0
     Do not format any comments.
     *Note Comments::.
.RE
.PP
`-nip'
.br
`--no-parameter-indentation'
.RS 0
     Zero width indentation for parameters.
     *Note Indentation::
.RE
.PP
`-nlp'
.br
`--dont-line-up-parentheses'
.RS 0
     Do not line up parentheses.
     *Note Statements::.
.RE
.PP
`-npcs'
.br
`--no-space-after-function-call-names'
.RS 0
     Do not put space after the function in function calls.
     *Note Statements::.
.RE
.PP
`-npsl'
.br
`--dont-break-procedure-type'
.RS 0
     Put the type of a procedure on the same line as its name.
     *Note Declarations::.
.RE
.PP
`-nsc'
.br
`--dont-star-comments'
.RS 0
     Do not put the `*' character at the left of comments.
     *Note Comments::.
.RE
.PP
`-nsob'
.br
`--leave-optional-blank-lines'
.RS 0
     Do not swallow optional blank lines.
     *Note Blank lines::.
.RE
`-nss'
.PP
`--dont-space-special-semicolon'
.RS 0
     Do not force a space before the semicolon after certain statements.
     Disables `-ss'.
     *Note Statements::.
.RE
.PP
`-nv'
.br
`--no-verbosity'
.RS 0
     Disable verbose mode. *Note Miscellaneous options::.
.RE
.PP
`-orig'
.br
`--original'
.RS 0
     Use the original Berkeley coding style.
     *Note Common styles::.
.RE
.PP
`-npro'
.br
`--ignore-profile'
.RS 0
     Do not read `.indent.pro' files.
     *Note Invoking indent::.
.RE
.PP
`-pcs'
.br
`--space-after-procedure-calls'
.RS 0
     Insert a space between the name of the procedure being called and
     the `('.
     *Note Statements::.
.RE
.PP
`-psl'
.br
`--procnames-start-lines'
.RS 0
     Put the type of a procedure on the line before its name.
     *Note Declarations::.
.RE
.PP
`-sc'
.br
`--start-left-side-of-comments'
.RS 0
     Put the `*' character at the left of comments.
     *Note Comments::.
.RE
.PP
`-sob'
.br
`--swallow-optional-blank-lines'
.RS 0
     Swallow optional blank lines.
     *Note Blank lines::.
.RE
.PP
`-ss'
.br
`--space-special-semicolon'
.RS 0
     On one-line `for' and `while' statments, force a blank before the
     semicolon.
     *Note Statements::.
.RE
.PP
`-st'
.br
`--standard-output'
.RS 0
     Write to standard output.
     *Note Invoking indent::.
.RE
.PP
`-T'
.RS 0
     Tell `indent' the name of typenames.
     *Note Declarations::.
.RE
.PP
`-tsN'
.br
`--tab-sizeN'
.RS 0
     Set tab size to N spaces.
     *Note Indentation::.
.RE
.PP
`-v'
.br
`--verbose'
.RS 0
     Enable verbose mode.
     *Note Miscellaneous options::.
.RE
.PP
`-version'
.RS 0
     Output the version number of `indent'.
     *Note Miscellaneous options::.
.RE
.SS Options' Cross Key
.PP
Here is a list of options alphabetized by long option, to help you
find the corresponding short option.
.NS
--no-blank-lines-after-commas                   -nbc
--no-blank-lines-after-declarations             -nbad
--no-blank-lines-after-procedures               -nbap
--no-comment-delimiters-on-blank-lines          -ncdb
--no-space-after-casts                          -ncs
--no-parameter-indentation                      -nip
--no-space-after-function-call-names            -npcs
--no-verbosity                                  -nv
--original                                      -orig
--parameter-indentation                         -ipN
--procnames-start-lines                         -psl
--space-after-cast                              -cs
--space-after-procedure-calls                   -pcs
--space-special-semicolon                       -ss
--standard-output                               -st
--start-left-side-of-comments                   -sc
--swallow-optional-blank-lines                  -sob
--tab-size                                      -tsN
--verbose                                       -v
.NE
.PP
.SH Index
.TS
l l
l l .
Menu:
--blank-after-sizeof	Statements.
--blank-lines-after-block-comments	Blank lines.
--blank-lines-after-commas	Declarations.
--blank-lines-after-declarations	-bad.
--blank-lines-after-procedures	-bap.
--brace-indentN	Statements.
--braces-after-if-line	Statements.
--braces-on-if-line	Statements.
--case-indentationN	Statements.
--comment-delimiters-on-blank-lines	Comments.
--comment-indentationN	Comments.
--continuation-indentationN	Indentation.
--continue-at-parentheses	Indentation.
--cuddle-else	Statements.
--declaration-comment-columnN	Comments.
--declaration-indentationN	Declarations.
--dont-break-procedure-type	Declarations.
--dont-cuddle-else	Statements.
--dont-format-comments	Comments.
--dont-format-first-column-comments	Comments.
--dont-line-up-parentheses	Indentation.
--dont-space-special-semicolon	Statements.
--dont-star-comments	Comments.
--else-endif-columnN	Comments.
--format-all-comments	Comments.
--format-first-column-comments	Comments.
--gnu-style	Common styles.
--ignore-profile	Invoking indent.
--indent-levelN	Indentation.
--k-and-r-style	Common styles.
--leave-optional-blank-lines	Blank lines.
--leave-preprocessor-space	Indentation.
--line-comments-indentationN	Comments.
--no-blank-lines-after-block-comments	Blank lines.
--no-blank-lines-after-commas	Declarations.
--no-blank-lines-after-declarations	-bad.
--no-blank-lines-after-procedures	-bap.
--no-comment-delimiters-on-blank-lines	Comments.
--no-parameter-indentation	Indentation.
--no-space-after-casts	Statements.
--no-space-after-function-call-names	Statements.
--no-verbosity	Miscellaneous options.
--original	Common styles.
--output-file	Invoking indent.
--parameter-indentationN	Indentation.
--procnames-start-lines	Declarations.
--remove-preprocessor-space	Indentation.
--space-after-cast	Statements.
--space-after-procedure-calls	Statements.
--space-special-semicolon	Statements.
--standard-output	Invoking indent.
--star-left-side-of-comments	Comments.
--swallow-optional-blank-lines	Blank lines.
--tab-sizeN	Indentation.
--verbose	Miscellaneous options.
-bad	-bad.
-bap	-bap.
-bbb	Blank lines.
-bc	Declarations.
-bl	Statements.
-bliN	Statements.
-br	Statements.
-bs	Statements.
-cdb	Comments.
-cdN	Comments.
-ce	Statements.
-ciN	Indentation.
-cliN	Statements.
-cN	Comments.
-cpN	Comments.
-cs	Statements.
-dce	Statements.
-diN	Declarations.
-dN	Comments.
-fc1	Comments.
-fca	Comments.
-gnu	Common styles.
-iN	Indentation.
-ipN	Indentation.
-kr	Common styles.
-lp	Indentation.
-lps	Indentation.
-nbad	-bad.
-nbap	-bap.
-nbbb	Blank lines.
-nbc	Declarations.
-ncdb	Comments.
-ncs	Statements.
-nfc1	Comments.
-nfca	Comments.
-nip	Indentation.
-nlp	Indentation.
-nlps	Indentation.
-npcs	Statements.
-npro	Invoking indent.
-npsl	Declarations.
-nsc	Comments.
-nsob	Blank lines.
-nss	Statements.
-nv	Miscellaneous options.
-o	Invoking indent.
-orig	Common styles.
-pcs	Statements.
-psl	Declarations.
-sc	Comments.
-sob	Blank lines.
-ss	Statements.
-st	Invoking indent.
-T	Declarations.
-tsN	Indentation.
-v	Miscellaneous options.
-version	Miscellaneous options.
\.indent.pro file	Invoking indent.
Beginning indent	Invoking indent.
Berkeley style	Common styles.
Blank lines	Blank lines.
Comments	Comments.
etags requires -psl	Declarations.
GNU style	Common styles.
Initialization file	Invoking indent.
Invoking indent	Invoking indent.
Kernighan & Ritchie style	Common styles.
Long options, use of	Invoking indent.
Original Berkeley style	Common styles.
Output File Specification	Invoking indent.
Standard Output	Invoking indent.
Starting indent	Invoking indent.
Typenames	Declarations.
Using Standard Input	Invoking indent.
.TE
